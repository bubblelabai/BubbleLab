name: CI

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Version Check
        run: |
          echo "üîç Checking versions..."
          echo "Node.js version: $(node --version)"
          echo "Bun version: $(bun --version)"
          echo "pnpm version: $(pnpm --version)"
          echo ""
          echo "üì¶ Package versions:"
          echo "Root package: $(node -p "require('./package.json').version || 'N/A'")"
          echo ""
          echo "Core packages:"
          echo "- @bubblelab/bubble-core: $(node -p "require('./packages/bubble-core/package.json').version")"
          echo "- @bubblelab/bubble-runtime: $(node -p "require('./packages/bubble-runtime/package.json').version")"
          echo "- @bubblelab/shared-schemas: $(node -p "require('./packages/bubble-shared-schemas/package.json').version")"
          echo "- create-bubblelab-app: $(node -p "require('./packages/create-bubblelab-app/package.json').version")"
          echo ""
          echo "üîß Tool versions:"
          echo "- TypeScript: $(npx tsc --version)"
          echo "- ESLint: $(npx eslint --version)"
          echo "- Turbo: $(npx turbo --version)"
          echo ""
          echo "üåç Environment:"
          echo "- OS: $(uname -a)"
          echo "- Architecture: $(uname -m)"
          echo "- Available memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "- Disk space: $(df -h / | tail -1 | awk '{print $4}')"
          echo ""
          echo "üìã Dependency validation:"
          echo "Checking for version mismatches..."
          pnpm list --depth=0 --json | jq -r '.dependencies | to_entries[] | select(.value.version != .value.resolved) | "‚ö†Ô∏è  \(.key): \(.value.version) vs \(.value.resolved)"' || echo "‚úÖ No version mismatches found"
          echo ""
          echo "‚úÖ Version check completed"

      - name: Setup test database
        run: |
          cd apps/bubblelab-api
          pnpm db:migrate
          cd ../..

      - name: Run type checking
        run: pnpm typecheck

      - name: Run linting
        run: pnpm lint

      - name: Run tests
        run: pnpm test
        env:
          CREDENTIAL_ENCRYPTION_KEY: ${{ secrets.CREDENTIAL_ENCRYPTION_KEY }}
