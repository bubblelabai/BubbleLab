/**
 * Self-contained TypeScript declarations for @bubblelab/bubble-core
 * Generated for Monaco Editor compatibility using Manual Bundler
 * 
 * This file includes all type definitions needed for full IntelliSense support
 * without external dependencies.
 * 
 * Generated with @bubblelab/type-bundler
 */


// ============================================================================
// Comprehensive Zod Types for Monaco Editor
// ============================================================================

declare namespace z {
  interface ZodRawShape {
    [k: string]: ZodTypeAny;
  }
  
  type UnknownKeysParam = 'passthrough' | 'strict' | 'strip';
  
  interface ZodTypeAny {
    _type: any;
    _output: any;
    _input: any;
    _def: any;
  }
  
  interface ZodSchema<Output = any, Def = any, Input = Output> extends ZodTypeAny {
    _output: Output;
    _input: Input;
    _def: Def;
  }
  
  interface ZodString extends ZodSchema<string, any, string> {}
  interface ZodNumber extends ZodSchema<number, any, number> {}
  interface ZodBoolean extends ZodSchema<boolean, any, boolean> {}
  interface ZodUndefined extends ZodSchema<undefined, any, undefined> {}
  interface ZodNull extends ZodSchema<null, any, null> {}
  interface ZodArray<T extends ZodTypeAny> extends ZodSchema<T['_output'][], any, T['_input'][]> {}
  interface ZodEnum<T extends readonly [string, ...string[]]> extends ZodSchema<T[number], any, T[number]> {}
  interface ZodOptional<T extends ZodTypeAny> extends ZodSchema<T['_output'] | undefined, any, T['_input'] | undefined> {}
  interface ZodDefault<T extends ZodTypeAny> extends ZodSchema<T['_output'], any, T['_input'] | undefined> {}
  
  interface ZodObject<
    T extends ZodRawShape,
    UnknownKeys extends UnknownKeysParam = 'strip',
    Catchall extends ZodTypeAny = ZodTypeAny,
    Output = { [k in keyof T]: T[k]['_output'] },
    Input = { [k in keyof T]: T[k]['_input'] }
  > extends ZodSchema<Output, any, Input> {
    _shape: T;
  }
  
  interface ZodDiscriminatedUnion<
    Discriminator extends string,
    Types extends ZodObject<any, any, any>[]
  > extends ZodSchema<any, any, any> {}
  
  // Essential utility types for Monaco
  type input<T extends ZodTypeAny> = T extends ZodObject<any, infer UK, any, any, infer Input>
    ? UK extends 'strict' 
      ? Input & { [K in Exclude<string | number | symbol, keyof Input>]?: never }
      : Input
    : T['_input'];
  type output<T extends ZodTypeAny> = T['_output'];
  type infer<T extends ZodTypeAny> = T['_output'];
}

// ============================================================================
// @bubblelab/bubble-core Type Definitions
// ============================================================================

// Inlined from ./types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// Inlined from ./bubble-trigger/types.js
export interface BubbleTriggerEventRegistry {
    'slack/bot_mentioned': SlackMentionEvent;
    'slack/message_received': SlackMessageReceivedEvent;
    'gmail/email_received': GmailEmailEvent;
    'schedule/cron/daily': CronEvent;
    'webhook/http': WebhookEvent;
}
export declare const BUBBLE_TRIGGER_EVENTS: {
    readonly 'slack/bot_mentioned': true;
    readonly 'slack/message_received': true;
    readonly 'gmail/email_received': true;
    readonly 'schedule/cron/daily': true;
    readonly 'webhook/http': true;
};
export declare function isValidBubbleTriggerEvent(eventType: string): eventType is keyof BubbleTriggerEventRegistry;
export interface BubbleTriggerEvent {
    type: keyof BubbleTriggerEventRegistry;
    timestamp: string;
    path: string;
    [key: string]: unknown;
}
export interface SlackEventWrapper {
    token: string;
    team_id: string;
    api_app_id: string;
    event: SlackAppMentionEvent | SlackMessageEvent;
    type: 'event_callback';
    authorizations: Array<{
        enterprise_id?: string;
        team_id: string;
        user_id: string;
        is_bot: boolean;
    }>;
    event_context: string;
    event_id: string;
    event_time: number;
}
export interface SlackAppMentionEvent {
    type: 'app_mention';
    user: string;
    text: string;
    ts: string;
    channel: string;
    event_ts: string;
    thread_ts?: string;
}
export interface SlackMessageEvent {
    type: 'message';
    user: string;
    text: string;
    ts: string;
    channel: string;
    event_ts: string;
    channel_type: 'channel' | 'group' | 'im' | 'mpim';
    subtype?: string;
}
export interface SlackMentionEvent extends BubbleTriggerEvent {
    slack_event: SlackEventWrapper;
    channel: string;
    user: string;
    text: string;
    thread_ts?: string;
}
export interface SlackMessageReceivedEvent extends BubbleTriggerEvent {
    slack_event: SlackEventWrapper;
    channel: string;
    user: string;
    text: string;
    channel_type: 'channel' | 'group' | 'im' | 'mpim';
    subtype?: string;
}
export interface GmailEmailEvent extends BubbleTriggerEvent {
    email: string;
}
export interface CronEvent extends BubbleTriggerEvent {
    cron: string;
}
export interface WebhookEvent extends BubbleTriggerEvent {
    body?: Record<string, unknown>;
}
export interface BubbleTriggerOptions {
    name?: string;
    description?: string;
    timeout?: number;
    retries?: number;
}

// Inlined from ./types/credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

// Inlined from ./types/service-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

export declare abstract class ServiceBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> implements IServiceBubble {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'service';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the bubble - just runs the action
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method to choose the appropriate credential based on bubble parameters
     * Should examine this.params to determine which credential to use from the injected credentials
     * Must be implemented by all service bubbles
     */
    protected abstract chooseCredential(): string | undefined;
    /**
     * Abstract method that subclasses must implement
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ./types/workflow-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

/**
 * WorkflowBubble - Higher-level abstraction that orchestrates ServiceBubbles
 * to create common, reusable workflow patterns.
 *
 * Key principles:
 * - User-friendly parameter names with clear purpose
 * - TypeScript type safety with helpful intellisense
 * - Composable patterns that reduce BubbleFlow complexity
 * - Error handling and validation at workflow level
 */
export declare abstract class WorkflowBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'workflow';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the workflow - orchestrates multiple ServiceBubbles
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method that subclasses must implement
     * This orchestrates the workflow by calling multiple ServiceBubbles
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ./bubble-flow/bubble-flow-class.js

// Inlined from ../bubble-trigger/types.js
export interface BubbleTriggerEventRegistry {
    'slack/bot_mentioned': SlackMentionEvent;
    'slack/message_received': SlackMessageReceivedEvent;
    'gmail/email_received': GmailEmailEvent;
    'schedule/cron/daily': CronEvent;
    'webhook/http': WebhookEvent;
}
export declare const BUBBLE_TRIGGER_EVENTS: {
    readonly 'slack/bot_mentioned': true;
    readonly 'slack/message_received': true;
    readonly 'gmail/email_received': true;
    readonly 'schedule/cron/daily': true;
    readonly 'webhook/http': true;
};
export declare function isValidBubbleTriggerEvent(eventType: string): eventType is keyof BubbleTriggerEventRegistry;
export interface BubbleTriggerEvent {
    type: keyof BubbleTriggerEventRegistry;
    timestamp: string;
    path: string;
    [key: string]: unknown;
}
export interface SlackEventWrapper {
    token: string;
    team_id: string;
    api_app_id: string;
    event: SlackAppMentionEvent | SlackMessageEvent;
    type: 'event_callback';
    authorizations: Array<{
        enterprise_id?: string;
        team_id: string;
        user_id: string;
        is_bot: boolean;
    }>;
    event_context: string;
    event_id: string;
    event_time: number;
}
export interface SlackAppMentionEvent {
    type: 'app_mention';
    user: string;
    text: string;
    ts: string;
    channel: string;
    event_ts: string;
    thread_ts?: string;
}
export interface SlackMessageEvent {
    type: 'message';
    user: string;
    text: string;
    ts: string;
    channel: string;
    event_ts: string;
    channel_type: 'channel' | 'group' | 'im' | 'mpim';
    subtype?: string;
}
export interface SlackMentionEvent extends BubbleTriggerEvent {
    slack_event: SlackEventWrapper;
    channel: string;
    user: string;
    text: string;
    thread_ts?: string;
}
export interface SlackMessageReceivedEvent extends BubbleTriggerEvent {
    slack_event: SlackEventWrapper;
    channel: string;
    user: string;
    text: string;
    channel_type: 'channel' | 'group' | 'im' | 'mpim';
    subtype?: string;
}
export interface GmailEmailEvent extends BubbleTriggerEvent {
    email: string;
}
export interface CronEvent extends BubbleTriggerEvent {
    cron: string;
}
export interface WebhookEvent extends BubbleTriggerEvent {
    body?: Record<string, unknown>;
}
export interface BubbleTriggerOptions {
    name?: string;
    description?: string;
    timeout?: number;
    retries?: number;
}

// Inlined from ../types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

export declare abstract class BubbleFlow<TEventType extends keyof BubbleTriggerEventRegistry> {
    readonly name: string;
    readonly description: string;
    constructor(name: string, description: string);
    abstract handle(payload: BubbleTriggerEventRegistry[TEventType]): Promise<BubbleFlowOperationResult>;
}

// Inlined from ./bubble-trigger/types.js
export interface BubbleTriggerEventRegistry {
    'slack/bot_mentioned': SlackMentionEvent;
    'slack/message_received': SlackMessageReceivedEvent;
    'gmail/email_received': GmailEmailEvent;
    'schedule/cron/daily': CronEvent;
    'webhook/http': WebhookEvent;
}
export declare const BUBBLE_TRIGGER_EVENTS: {
    readonly 'slack/bot_mentioned': true;
    readonly 'slack/message_received': true;
    readonly 'gmail/email_received': true;
    readonly 'schedule/cron/daily': true;
    readonly 'webhook/http': true;
};
export declare function isValidBubbleTriggerEvent(eventType: string): eventType is keyof BubbleTriggerEventRegistry;
export interface BubbleTriggerEvent {
    type: keyof BubbleTriggerEventRegistry;
    timestamp: string;
    path: string;
    [key: string]: unknown;
}
export interface SlackEventWrapper {
    token: string;
    team_id: string;
    api_app_id: string;
    event: SlackAppMentionEvent | SlackMessageEvent;
    type: 'event_callback';
    authorizations: Array<{
        enterprise_id?: string;
        team_id: string;
        user_id: string;
        is_bot: boolean;
    }>;
    event_context: string;
    event_id: string;
    event_time: number;
}
export interface SlackAppMentionEvent {
    type: 'app_mention';
    user: string;
    text: string;
    ts: string;
    channel: string;
    event_ts: string;
    thread_ts?: string;
}
export interface SlackMessageEvent {
    type: 'message';
    user: string;
    text: string;
    ts: string;
    channel: string;
    event_ts: string;
    channel_type: 'channel' | 'group' | 'im' | 'mpim';
    subtype?: string;
}
export interface SlackMentionEvent extends BubbleTriggerEvent {
    slack_event: SlackEventWrapper;
    channel: string;
    user: string;
    text: string;
    thread_ts?: string;
}
export interface SlackMessageReceivedEvent extends BubbleTriggerEvent {
    slack_event: SlackEventWrapper;
    channel: string;
    user: string;
    text: string;
    channel_type: 'channel' | 'group' | 'im' | 'mpim';
    subtype?: string;
}
export interface GmailEmailEvent extends BubbleTriggerEvent {
    email: string;
}
export interface CronEvent extends BubbleTriggerEvent {
    cron: string;
}
export interface WebhookEvent extends BubbleTriggerEvent {
    body?: Record<string, unknown>;
}
export interface BubbleTriggerOptions {
    name?: string;
    description?: string;
    timeout?: number;
    retries?: number;
}

// Inlined from ./bubbles/service-bubble/hello-world.js

// Inlined from ../../types/service-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

export declare abstract class ServiceBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> implements IServiceBubble {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'service';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the bubble - just runs the action
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method to choose the appropriate credential based on bubble parameters
     * Should examine this.params to determine which credential to use from the injected credentials
     * Must be implemented by all service bubbles
     */
    protected abstract chooseCredential(): string | undefined;
    /**
     * Abstract method that subclasses must implement
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ../../types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// Inlined from ../../types/credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

declare const HelloWorldParamsSchema: z.ZodObject<{
    name: z.ZodString;
    message: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    name: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    name: string;
    message?: string | undefined;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}>;
// Monaco-friendly type alias
type HelloWorldParamsInput = z.input<typeof HelloWorldParamsSchema>;;
type HelloWorldParams = z.output<typeof HelloWorldParamsSchema>;
declare const HelloWorldResultSchema: z.ZodObject<{
    greeting: z.ZodString;
    success: z.ZodBoolean;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    greeting: string;
}, {
    success: boolean;
    error: string;
    greeting: string;
}>;
type HelloWorldResult = z.output<typeof HelloWorldResultSchema>;
export declare class HelloWorldBubble extends ServiceBubble<HelloWorldParams, HelloWorldResult> {
    readonly type: "service";
    readonly service = "nodex-core";
    readonly authType: "none";
    static readonly bubbleName = "hello-world";
    static readonly schema: z.ZodObject<{
        name: z.ZodString;
        message: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        name: string;
        message?: string | undefined;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }>;
    static readonly resultSchema: z.ZodObject<{
        greeting: z.ZodString;
        success: z.ZodBoolean;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        greeting: string;
    }, {
        success: boolean;
        error: string;
        greeting: string;
    }>;
    static readonly shortDescription = "Simple hello world bubble for testing purposes";
    static readonly longDescription = "\n    A basic hello world bubble that demonstrates the NodeX bubble system.\n    Use cases:\n    - Testing the bubble execution system\n    - Validating NodeX integration\n    - Learning bubble development patterns\n  ";
    static readonly alias = "hello";
    constructor(params: HelloWorldParamsInput, context?: BubbleContext);
    protected chooseCredential(): string | undefined;
    protected performAction(context?: BubbleContext): Promise<HelloWorldResult>;
}
export {};

// Inlined from ./bubbles/service-bubble/ai-agent.js

// Inlined from ../../types/service-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

export declare abstract class ServiceBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> implements IServiceBubble {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'service';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the bubble - just runs the action
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method to choose the appropriate credential based on bubble parameters
     * Should examine this.params to determine which credential to use from the injected credentials
     * Must be implemented by all service bubbles
     */
    protected abstract chooseCredential(): string | undefined;
    /**
     * Abstract method that subclasses must implement
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ../../types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// Inlined from ../../types/credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export declare const AvailableModels: z.ZodEnum<["openai/gpt-4o", "openai/gpt-4", "openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "openai/gpt-3.5-turbo-16k", "google/gemini-2.5-pro", "google/gemini-2.5-flash", "google/gemini-2.5-flash-lite", "google/gemini-2.0-flash-exp", "google/gemini-pro", "google/gemini-pro-vision", "google/gemini-1.5-pro", "google/gemini-1.5-flash"]>;
declare const AIAgentParamsSchema: z.ZodObject<{
    message: z.ZodString;
    systemPrompt: z.ZodDefault<z.ZodString>;
    model: z.ZodDefault<z.ZodObject<{
        model: z.ZodDefault<z.ZodEnum<["openai/gpt-4o", "openai/gpt-4", "openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "openai/gpt-3.5-turbo-16k", "google/gemini-2.5-pro", "google/gemini-2.5-flash", "google/gemini-2.5-flash-lite", "google/gemini-2.0-flash-exp", "google/gemini-pro", "google/gemini-pro-vision", "google/gemini-1.5-pro", "google/gemini-1.5-flash"]>>;
        temperature: z.ZodDefault<z.ZodNumber>;
        maxTokens: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
        temperature: number;
        maxTokens: number;
    }, {
        model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
        temperature?: number | undefined;
        maxTokens?: number | undefined;
    }>>;
    tools: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodEnum<["search", "calculator"]>;
        config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        name: "search" | "calculator";
        config?: Record<string, unknown> | undefined;
    }, {
        name: "search" | "calculator";
        config?: Record<string, unknown> | undefined;
    }>, "many">>;
    maxIterations: z.ZodDefault<z.ZodNumber>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    systemPrompt: string;
    model: {
        model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
        temperature: number;
        maxTokens: number;
    };
    tools: {
        name: "search" | "calculator";
        config?: Record<string, unknown> | undefined;
    }[];
    maxIterations: number;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    message: string;
    systemPrompt?: string | undefined;
    model?: {
        model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
        temperature?: number | undefined;
        maxTokens?: number | undefined;
    } | undefined;
    tools?: {
        name: "search" | "calculator";
        config?: Record<string, unknown> | undefined;
    }[] | undefined;
    maxIterations?: number | undefined;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}>;
declare const AIAgentResultSchema: z.ZodObject<{
    response: z.ZodString;
    toolCalls: z.ZodOptional<z.ZodArray<z.ZodObject<{
        tool: z.ZodString;
        input: z.ZodUnknown;
        output: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        tool: string;
        input?: unknown;
        output?: unknown;
    }, {
        tool: string;
        input?: unknown;
        output?: unknown;
    }>, "many">>;
    iterations: z.ZodNumber;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    response: string;
    iterations: number;
    error: string;
    success: boolean;
    toolCalls?: {
        tool: string;
        input?: unknown;
        output?: unknown;
    }[] | undefined;
}, {
    response: string;
    iterations: number;
    error: string;
    success: boolean;
    toolCalls?: {
        tool: string;
        input?: unknown;
        output?: unknown;
    }[] | undefined;
}>;
// Monaco-friendly type alias
type AIAgentParams = z.input<typeof AIAgentParamsSchema>;;
type AIAgentParamsParsed = z.output<typeof AIAgentParamsSchema>;
type AIAgentResult = z.output<typeof AIAgentResultSchema>;
export declare class AIAgentBubble extends ServiceBubble<AIAgentParamsParsed, AIAgentResult> {
    readonly type: "service";
    readonly service = "ai-agent";
    readonly authType: "apikey";
    static readonly bubbleName = "ai-agent";
    static readonly schema: z.ZodObject<{
        message: z.ZodString;
        systemPrompt: z.ZodDefault<z.ZodString>;
        model: z.ZodDefault<z.ZodObject<{
            model: z.ZodDefault<z.ZodEnum<["openai/gpt-4o", "openai/gpt-4", "openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "openai/gpt-3.5-turbo-16k", "google/gemini-2.5-pro", "google/gemini-2.5-flash", "google/gemini-2.5-flash-lite", "google/gemini-2.0-flash-exp", "google/gemini-pro", "google/gemini-pro-vision", "google/gemini-1.5-pro", "google/gemini-1.5-flash"]>>;
            temperature: z.ZodDefault<z.ZodNumber>;
            maxTokens: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
            temperature: number;
            maxTokens: number;
        }, {
            model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
            temperature?: number | undefined;
            maxTokens?: number | undefined;
        }>>;
        tools: z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodEnum<["search", "calculator"]>;
            config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            name: "search" | "calculator";
            config?: Record<string, unknown> | undefined;
        }, {
            name: "search" | "calculator";
            config?: Record<string, unknown> | undefined;
        }>, "many">>;
        maxIterations: z.ZodDefault<z.ZodNumber>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        systemPrompt: string;
        model: {
            model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
            temperature: number;
            maxTokens: number;
        };
        tools: {
            name: "search" | "calculator";
            config?: Record<string, unknown> | undefined;
        }[];
        maxIterations: number;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        message: string;
        systemPrompt?: string | undefined;
        model?: {
            model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
            temperature?: number | undefined;
            maxTokens?: number | undefined;
        } | undefined;
        tools?: {
            name: "search" | "calculator";
            config?: Record<string, unknown> | undefined;
        }[] | undefined;
        maxIterations?: number | undefined;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }>;
    static readonly resultSchema: z.ZodObject<{
        response: z.ZodString;
        toolCalls: z.ZodOptional<z.ZodArray<z.ZodObject<{
            tool: z.ZodString;
            input: z.ZodUnknown;
            output: z.ZodUnknown;
        }, "strip", z.ZodTypeAny, {
            tool: string;
            input?: unknown;
            output?: unknown;
        }, {
            tool: string;
            input?: unknown;
            output?: unknown;
        }>, "many">>;
        iterations: z.ZodNumber;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        response: string;
        iterations: number;
        error: string;
        success: boolean;
        toolCalls?: {
            tool: string;
            input?: unknown;
            output?: unknown;
        }[] | undefined;
    }, {
        response: string;
        iterations: number;
        error: string;
        success: boolean;
        toolCalls?: {
            tool: string;
            input?: unknown;
            output?: unknown;
        }[] | undefined;
    }>;
    static readonly shortDescription = "AI agent with LangGraph for tool-enabled conversations";
    static readonly longDescription = "\n    An AI agent powered by LangGraph that can use tools to answer questions.\n    Use cases:\n    - Research assistance with web search\n    - Mathematical calculations\n    - Multi-step reasoning tasks\n    - Tool-augmented conversations\n  ";
    static readonly alias = "agent";
    constructor(params: AIAgentParams, context?: BubbleContext);
    protected performAction(context?: BubbleContext): Promise<AIAgentResult>;
    protected chooseCredential(): string | undefined;
    private initializeModel;
    private initializeTools;
    private createAgentGraph;
    private executeAgent;
}
export {};

// Inlined from ./bubbles/service-bubble/postgresql.js

// Inlined from ../../types/service-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

export declare abstract class ServiceBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> implements IServiceBubble {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'service';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the bubble - just runs the action
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method to choose the appropriate credential based on bubble parameters
     * Should examine this.params to determine which credential to use from the injected credentials
     * Must be implemented by all service bubbles
     */
    protected abstract chooseCredential(): string | undefined;
    /**
     * Abstract method that subclasses must implement
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ../../types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// Inlined from ../../types/credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export declare const SqlOperations: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "WITH", "EXPLAIN", "ANALYZE", "SHOW", "DESCRIBE", "DESC", "CREATE"]>;
declare const PostgreSQLParamsSchema: z.ZodObject<{
    ignoreSSL: z.ZodDefault<z.ZodBoolean>;
    query: z.ZodEffects<z.ZodString, string, string>;
    allowedOperations: z.ZodDefault<z.ZodArray<z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "WITH", "EXPLAIN", "ANALYZE", "SHOW", "DESCRIBE", "DESC", "CREATE"]>, "many">>;
    parameters: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    timeout: z.ZodDefault<z.ZodNumber>;
    maxRows: z.ZodDefault<z.ZodNumber>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    ignoreSSL: boolean;
    query: string;
    allowedOperations: ("SELECT" | "INSERT" | "UPDATE" | "DELETE" | "WITH" | "EXPLAIN" | "ANALYZE" | "SHOW" | "DESCRIBE" | "DESC" | "CREATE")[];
    parameters: unknown[];
    timeout: number;
    maxRows: number;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    query: string;
    ignoreSSL?: boolean | undefined;
    allowedOperations?: ("SELECT" | "INSERT" | "UPDATE" | "DELETE" | "WITH" | "EXPLAIN" | "ANALYZE" | "SHOW" | "DESCRIBE" | "DESC" | "CREATE")[] | undefined;
    parameters?: unknown[] | undefined;
    timeout?: number | undefined;
    maxRows?: number | undefined;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}>;
// Monaco-friendly type alias
type PostgreSQLParamsInput = z.input<typeof PostgreSQLParamsSchema>;;
type PostgreSQLParams = z.output<typeof PostgreSQLParamsSchema>;
declare const PostgreSQLResultSchema: z.ZodObject<{
    rows: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>, "many">;
    rowCount: z.ZodNullable<z.ZodNumber>;
    command: z.ZodString;
    fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        dataTypeID: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: string;
        dataTypeID: number;
    }, {
        name: string;
        dataTypeID: number;
    }>, "many">>;
    executionTime: z.ZodNumber;
    success: z.ZodBoolean;
    error: z.ZodString;
    cleanedJSONString: z.ZodString;
}, "strip", z.ZodTypeAny, {
    rows: Record<string, unknown>[];
    rowCount: number | null;
    command: string;
    executionTime: number;
    success: boolean;
    error: string;
    cleanedJSONString: string;
    fields?: {
        name: string;
        dataTypeID: number;
    }[] | undefined;
}, {
    rows: Record<string, unknown>[];
    rowCount: number | null;
    command: string;
    executionTime: number;
    success: boolean;
    error: string;
    cleanedJSONString: string;
    fields?: {
        name: string;
        dataTypeID: number;
    }[] | undefined;
}>;
type PostgreSQLResult = z.output<typeof PostgreSQLResultSchema>;
export declare class PostgreSQLBubble extends ServiceBubble<PostgreSQLParams, PostgreSQLResult> {
    readonly type: "service";
    readonly service = "postgresql";
    readonly authType: "connection-string";
    static readonly bubbleName = "postgresql";
    static readonly schema: z.ZodObject<{
        ignoreSSL: z.ZodDefault<z.ZodBoolean>;
        query: z.ZodEffects<z.ZodString, string, string>;
        allowedOperations: z.ZodDefault<z.ZodArray<z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "WITH", "EXPLAIN", "ANALYZE", "SHOW", "DESCRIBE", "DESC", "CREATE"]>, "many">>;
        parameters: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
        timeout: z.ZodDefault<z.ZodNumber>;
        maxRows: z.ZodDefault<z.ZodNumber>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        ignoreSSL: boolean;
        query: string;
        allowedOperations: ("SELECT" | "INSERT" | "UPDATE" | "DELETE" | "WITH" | "EXPLAIN" | "ANALYZE" | "SHOW" | "DESCRIBE" | "DESC" | "CREATE")[];
        parameters: unknown[];
        timeout: number;
        maxRows: number;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        query: string;
        ignoreSSL?: boolean | undefined;
        allowedOperations?: ("SELECT" | "INSERT" | "UPDATE" | "DELETE" | "WITH" | "EXPLAIN" | "ANALYZE" | "SHOW" | "DESCRIBE" | "DESC" | "CREATE")[] | undefined;
        parameters?: unknown[] | undefined;
        timeout?: number | undefined;
        maxRows?: number | undefined;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }>;
    static readonly resultSchema: z.ZodObject<{
        rows: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>, "many">;
        rowCount: z.ZodNullable<z.ZodNumber>;
        command: z.ZodString;
        fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            dataTypeID: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            dataTypeID: number;
        }, {
            name: string;
            dataTypeID: number;
        }>, "many">>;
        executionTime: z.ZodNumber;
        success: z.ZodBoolean;
        error: z.ZodString;
        cleanedJSONString: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        rows: Record<string, unknown>[];
        rowCount: number | null;
        command: string;
        executionTime: number;
        success: boolean;
        error: string;
        cleanedJSONString: string;
        fields?: {
            name: string;
            dataTypeID: number;
        }[] | undefined;
    }, {
        rows: Record<string, unknown>[];
        rowCount: number | null;
        command: string;
        executionTime: number;
        success: boolean;
        error: string;
        cleanedJSONString: string;
        fields?: {
            name: string;
            dataTypeID: number;
        }[] | undefined;
    }>;
    static readonly shortDescription = "Execute PostgreSQL queries with operation validation";
    static readonly longDescription = "\n    Execute SQL queries against PostgreSQL databases with proper validation and security controls.\n    Use cases:\n    - Data retrieval with SELECT queries\n    - Data manipulation with INSERT, UPDATE, DELETE (when explicitly allowed)\n    - Database reporting and analytics\n    - Data migration and synchronization tasks\n    - JSON string output for integration with other systems\n    \n    Security Features:\n    - Operation whitelist (defaults to SELECT only)\n    - Parameterized queries to prevent SQL injection\n    - Connection timeout controls\n    - Result sanitization for JSON output\n  ";
    static readonly alias = "pg";
    constructor(params: PostgreSQLParamsInput, context?: BubbleContext);
    protected performAction(context?: BubbleContext): Promise<PostgreSQLResult>;
    /**
     * Validate that the SQL query operation is allowed
     */
    private validateSqlOperation;
    /**
     * Validate parameter usage to encourage parameterized queries
     */
    private validateParameterUsage;
    /**
     * Validate parentheses and quotes are balanced
     */
    private validateParenthesesBalance;
    /**
     * Clean and format query results as a JSON string
     */
    private cleanJSONString;
    /**
     * Clean an object by handling special values and preventing circular references
     */
    private cleanObject;
    protected chooseCredential(): string | undefined;
}
export {};

// Inlined from ./bubbles/service-bubble/slack.js

// Inlined from ../../types/service-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

export declare abstract class ServiceBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> implements IServiceBubble {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'service';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the bubble - just runs the action
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method to choose the appropriate credential based on bubble parameters
     * Should examine this.params to determine which credential to use from the injected credentials
     * Must be implemented by all service bubbles
     */
    protected abstract chooseCredential(): string | undefined;
    /**
     * Abstract method that subclasses must implement
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ../../types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// Inlined from ../../types/credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

declare const SlackParamsSchema: z.ZodDiscriminatedUnion<"operation", [z.ZodObject<{
    operation: z.ZodLiteral<"send_message">;
    channel: z.ZodString;
    text: z.ZodString;
    username: z.ZodOptional<z.ZodString>;
    icon_emoji: z.ZodOptional<z.ZodString>;
    icon_url: z.ZodOptional<z.ZodString>;
    attachments: z.ZodOptional<z.ZodArray<z.ZodObject<{
        color: z.ZodOptional<z.ZodString>;
        pretext: z.ZodOptional<z.ZodString>;
        author_name: z.ZodOptional<z.ZodString>;
        author_link: z.ZodOptional<z.ZodString>;
        author_icon: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodString>;
        title_link: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
            title: z.ZodString;
            value: z.ZodString;
            short: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            title: string;
            short?: boolean | undefined;
        }, {
            value: string;
            title: string;
            short?: boolean | undefined;
        }>, "many">>;
        image_url: z.ZodOptional<z.ZodString>;
        thumb_url: z.ZodOptional<z.ZodString>;
        footer: z.ZodOptional<z.ZodString>;
        footer_icon: z.ZodOptional<z.ZodString>;
        ts: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        fields?: {
            value: string;
            title: string;
            short?: boolean | undefined;
        }[] | undefined;
        text?: string | undefined;
        color?: string | undefined;
        pretext?: string | undefined;
        author_name?: string | undefined;
        author_link?: string | undefined;
        author_icon?: string | undefined;
        title?: string | undefined;
        title_link?: string | undefined;
        image_url?: string | undefined;
        thumb_url?: string | undefined;
        footer?: string | undefined;
        footer_icon?: string | undefined;
        ts?: number | undefined;
    }, {
        fields?: {
            value: string;
            title: string;
            short?: boolean | undefined;
        }[] | undefined;
        text?: string | undefined;
        color?: string | undefined;
        pretext?: string | undefined;
        author_name?: string | undefined;
        author_link?: string | undefined;
        author_icon?: string | undefined;
        title?: string | undefined;
        title_link?: string | undefined;
        image_url?: string | undefined;
        thumb_url?: string | undefined;
        footer?: string | undefined;
        footer_icon?: string | undefined;
        ts?: number | undefined;
    }>, "many">>;
    blocks: z.ZodOptional<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, z.ZodTypeAny, "passthrough">>, "many">>;
    thread_ts: z.ZodOptional<z.ZodString>;
    reply_broadcast: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    unfurl_links: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    unfurl_media: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    operation: "send_message";
    channel: string;
    text: string;
    reply_broadcast: boolean;
    unfurl_links: boolean;
    unfurl_media: boolean;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    username?: string | undefined;
    icon_emoji?: string | undefined;
    icon_url?: string | undefined;
    attachments?: {
        fields?: {
            value: string;
            title: string;
            short?: boolean | undefined;
        }[] | undefined;
        text?: string | undefined;
        color?: string | undefined;
        pretext?: string | undefined;
        author_name?: string | undefined;
        author_link?: string | undefined;
        author_icon?: string | undefined;
        title?: string | undefined;
        title_link?: string | undefined;
        image_url?: string | undefined;
        thumb_url?: string | undefined;
        footer?: string | undefined;
        footer_icon?: string | undefined;
        ts?: number | undefined;
    }[] | undefined;
    blocks?: z.objectOutputType<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
    thread_ts?: string | undefined;
}, {
    operation: "send_message";
    channel: string;
    text: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    username?: string | undefined;
    icon_emoji?: string | undefined;
    icon_url?: string | undefined;
    attachments?: {
        fields?: {
            value: string;
            title: string;
            short?: boolean | undefined;
        }[] | undefined;
        text?: string | undefined;
        color?: string | undefined;
        pretext?: string | undefined;
        author_name?: string | undefined;
        author_link?: string | undefined;
        author_icon?: string | undefined;
        title?: string | undefined;
        title_link?: string | undefined;
        image_url?: string | undefined;
        thumb_url?: string | undefined;
        footer?: string | undefined;
        footer_icon?: string | undefined;
        ts?: number | undefined;
    }[] | undefined;
    blocks?: z.objectInputType<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
    thread_ts?: string | undefined;
    reply_broadcast?: boolean | undefined;
    unfurl_links?: boolean | undefined;
    unfurl_media?: boolean | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"list_channels">;
    types: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodEnum<["public_channel", "private_channel", "mpim", "im"]>, "many">>>;
    exclude_archived: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    limit: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    cursor: z.ZodOptional<z.ZodString>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    operation: "list_channels";
    types: ("public_channel" | "private_channel" | "mpim" | "im")[];
    exclude_archived: boolean;
    limit: number;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    cursor?: string | undefined;
}, {
    operation: "list_channels";
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    types?: ("public_channel" | "private_channel" | "mpim" | "im")[] | undefined;
    exclude_archived?: boolean | undefined;
    limit?: number | undefined;
    cursor?: string | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"get_channel_info">;
    channel: z.ZodString;
    include_locale: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    operation: "get_channel_info";
    channel: string;
    include_locale: boolean;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    operation: "get_channel_info";
    channel: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    include_locale?: boolean | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"get_user_info">;
    user: z.ZodString;
    include_locale: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    operation: "get_user_info";
    include_locale: boolean;
    user: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    operation: "get_user_info";
    user: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    include_locale?: boolean | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"list_users">;
    limit: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    cursor: z.ZodOptional<z.ZodString>;
    include_locale: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    operation: "list_users";
    limit: number;
    include_locale: boolean;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    cursor?: string | undefined;
}, {
    operation: "list_users";
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    limit?: number | undefined;
    cursor?: string | undefined;
    include_locale?: boolean | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"get_conversation_history">;
    channel: z.ZodString;
    latest: z.ZodOptional<z.ZodString>;
    oldest: z.ZodOptional<z.ZodString>;
    inclusive: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    limit: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    cursor: z.ZodOptional<z.ZodString>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    inclusive: boolean;
    operation: "get_conversation_history";
    channel: string;
    limit: number;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    cursor?: string | undefined;
    latest?: string | undefined;
    oldest?: string | undefined;
}, {
    operation: "get_conversation_history";
    channel: string;
    inclusive?: boolean | undefined;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    limit?: number | undefined;
    cursor?: string | undefined;
    latest?: string | undefined;
    oldest?: string | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"update_message">;
    channel: z.ZodString;
    ts: z.ZodString;
    text: z.ZodOptional<z.ZodString>;
    attachments: z.ZodOptional<z.ZodArray<z.ZodObject<{
        color: z.ZodOptional<z.ZodString>;
        pretext: z.ZodOptional<z.ZodString>;
        author_name: z.ZodOptional<z.ZodString>;
        author_link: z.ZodOptional<z.ZodString>;
        author_icon: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodString>;
        title_link: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
            title: z.ZodString;
            value: z.ZodString;
            short: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            title: string;
            short?: boolean | undefined;
        }, {
            value: string;
            title: string;
            short?: boolean | undefined;
        }>, "many">>;
        image_url: z.ZodOptional<z.ZodString>;
        thumb_url: z.ZodOptional<z.ZodString>;
        footer: z.ZodOptional<z.ZodString>;
        footer_icon: z.ZodOptional<z.ZodString>;
        ts: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        fields?: {
            value: string;
            title: string;
            short?: boolean | undefined;
        }[] | undefined;
        text?: string | undefined;
        color?: string | undefined;
        pretext?: string | undefined;
        author_name?: string | undefined;
        author_link?: string | undefined;
        author_icon?: string | undefined;
        title?: string | undefined;
        title_link?: string | undefined;
        image_url?: string | undefined;
        thumb_url?: string | undefined;
        footer?: string | undefined;
        footer_icon?: string | undefined;
        ts?: number | undefined;
    }, {
        fields?: {
            value: string;
            title: string;
            short?: boolean | undefined;
        }[] | undefined;
        text?: string | undefined;
        color?: string | undefined;
        pretext?: string | undefined;
        author_name?: string | undefined;
        author_link?: string | undefined;
        author_icon?: string | undefined;
        title?: string | undefined;
        title_link?: string | undefined;
        image_url?: string | undefined;
        thumb_url?: string | undefined;
        footer?: string | undefined;
        footer_icon?: string | undefined;
        ts?: number | undefined;
    }>, "many">>;
    blocks: z.ZodOptional<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, z.ZodTypeAny, "passthrough">>, "many">>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    operation: "update_message";
    channel: string;
    ts: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    text?: string | undefined;
    attachments?: {
        fields?: {
            value: string;
            title: string;
            short?: boolean | undefined;
        }[] | undefined;
        text?: string | undefined;
        color?: string | undefined;
        pretext?: string | undefined;
        author_name?: string | undefined;
        author_link?: string | undefined;
        author_icon?: string | undefined;
        title?: string | undefined;
        title_link?: string | undefined;
        image_url?: string | undefined;
        thumb_url?: string | undefined;
        footer?: string | undefined;
        footer_icon?: string | undefined;
        ts?: number | undefined;
    }[] | undefined;
    blocks?: z.objectOutputType<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
}, {
    operation: "update_message";
    channel: string;
    ts: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    text?: string | undefined;
    attachments?: {
        fields?: {
            value: string;
            title: string;
            short?: boolean | undefined;
        }[] | undefined;
        text?: string | undefined;
        color?: string | undefined;
        pretext?: string | undefined;
        author_name?: string | undefined;
        author_link?: string | undefined;
        author_icon?: string | undefined;
        title?: string | undefined;
        title_link?: string | undefined;
        image_url?: string | undefined;
        thumb_url?: string | undefined;
        footer?: string | undefined;
        footer_icon?: string | undefined;
        ts?: number | undefined;
    }[] | undefined;
    blocks?: z.objectInputType<{
        type: z.ZodString;
        text: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["plain_text", "mrkdwn"]>;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }, {
            type: "plain_text" | "mrkdwn";
            text: string;
        }>>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"delete_message">;
    channel: z.ZodString;
    ts: z.ZodString;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    operation: "delete_message";
    channel: string;
    ts: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    operation: "delete_message";
    channel: string;
    ts: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"add_reaction">;
    name: z.ZodString;
    channel: z.ZodString;
    timestamp: z.ZodString;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    timestamp: string;
    name: string;
    operation: "add_reaction";
    channel: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    timestamp: string;
    name: string;
    operation: "add_reaction";
    channel: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"remove_reaction">;
    name: z.ZodString;
    channel: z.ZodString;
    timestamp: z.ZodString;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    timestamp: string;
    name: string;
    operation: "remove_reaction";
    channel: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    timestamp: string;
    name: string;
    operation: "remove_reaction";
    channel: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}>]>;
declare const SlackResultSchema: z.ZodDiscriminatedUnion<"operation", [z.ZodObject<{
    operation: z.ZodLiteral<"send_message">;
    ok: z.ZodBoolean;
    channel: z.ZodOptional<z.ZodString>;
    ts: z.ZodOptional<z.ZodString>;
    message: z.ZodOptional<z.ZodObject<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough">>>;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "send_message";
    ok: boolean;
    message?: z.objectOutputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    channel?: string | undefined;
    ts?: string | undefined;
}, {
    success: boolean;
    error: string;
    operation: "send_message";
    ok: boolean;
    message?: z.objectInputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    channel?: string | undefined;
    ts?: string | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"list_channels">;
    ok: z.ZodBoolean;
    channels: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">>, "many">>;
    response_metadata: z.ZodOptional<z.ZodObject<{
        next_cursor: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        next_cursor: string;
    }, {
        next_cursor: string;
    }>>;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "list_channels";
    ok: boolean;
    channels?: z.objectOutputType<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
    response_metadata?: {
        next_cursor: string;
    } | undefined;
}, {
    success: boolean;
    error: string;
    operation: "list_channels";
    ok: boolean;
    channels?: z.objectInputType<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
    response_metadata?: {
        next_cursor: string;
    } | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"get_channel_info">;
    ok: z.ZodBoolean;
    channel: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">>>;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "get_channel_info";
    ok: boolean;
    channel?: z.objectOutputType<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    success: boolean;
    error: string;
    operation: "get_channel_info";
    ok: boolean;
    channel?: z.objectInputType<{
        id: z.ZodString;
        name: z.ZodString;
        is_channel: z.ZodOptional<z.ZodBoolean>;
        is_group: z.ZodOptional<z.ZodBoolean>;
        is_im: z.ZodOptional<z.ZodBoolean>;
        is_mpim: z.ZodOptional<z.ZodBoolean>;
        is_private: z.ZodOptional<z.ZodBoolean>;
        created: z.ZodNumber;
        is_archived: z.ZodBoolean;
        is_general: z.ZodOptional<z.ZodBoolean>;
        unlinked: z.ZodOptional<z.ZodNumber>;
        name_normalized: z.ZodOptional<z.ZodString>;
        is_shared: z.ZodOptional<z.ZodBoolean>;
        is_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_org_shared: z.ZodOptional<z.ZodBoolean>;
        shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
        is_member: z.ZodOptional<z.ZodBoolean>;
        is_open: z.ZodOptional<z.ZodBoolean>;
        topic: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        purpose: z.ZodOptional<z.ZodObject<{
            value: z.ZodString;
            creator: z.ZodString;
            last_set: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: string;
            creator: string;
            last_set: number;
        }, {
            value: string;
            creator: string;
            last_set: number;
        }>>;
        num_members: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"get_user_info">;
    ok: z.ZodBoolean;
    user: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "get_user_info";
    ok: boolean;
    user?: z.objectOutputType<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    success: boolean;
    error: string;
    operation: "get_user_info";
    ok: boolean;
    user?: z.objectInputType<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"list_users">;
    ok: z.ZodBoolean;
    members: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>, "many">>;
    response_metadata: z.ZodOptional<z.ZodObject<{
        next_cursor: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        next_cursor: string;
    }, {
        next_cursor: string;
    }>>;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "list_users";
    ok: boolean;
    response_metadata?: {
        next_cursor: string;
    } | undefined;
    members?: z.objectOutputType<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
}, {
    success: boolean;
    error: string;
    operation: "list_users";
    ok: boolean;
    response_metadata?: {
        next_cursor: string;
    } | undefined;
    members?: z.objectInputType<{
        id: z.ZodString;
        team_id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        deleted: z.ZodOptional<z.ZodBoolean>;
        color: z.ZodOptional<z.ZodString>;
        real_name: z.ZodOptional<z.ZodString>;
        tz: z.ZodOptional<z.ZodString>;
        tz_label: z.ZodOptional<z.ZodString>;
        tz_offset: z.ZodOptional<z.ZodNumber>;
        profile: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            phone: z.ZodOptional<z.ZodString>;
            skype: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            real_name_normalized: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            display_name_normalized: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            status_text: z.ZodOptional<z.ZodString>;
            status_emoji: z.ZodOptional<z.ZodString>;
            status_expiration: z.ZodOptional<z.ZodNumber>;
            avatar_hash: z.ZodOptional<z.ZodString>;
            image_original: z.ZodOptional<z.ZodString>;
            is_custom_image: z.ZodOptional<z.ZodBoolean>;
            email: z.ZodOptional<z.ZodString>;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            image_24: z.ZodOptional<z.ZodString>;
            image_32: z.ZodOptional<z.ZodString>;
            image_48: z.ZodOptional<z.ZodString>;
            image_72: z.ZodOptional<z.ZodString>;
            image_192: z.ZodOptional<z.ZodString>;
            image_512: z.ZodOptional<z.ZodString>;
            image_1024: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }, {
            email?: string | undefined;
            fields?: Record<string, unknown> | undefined;
            title?: string | undefined;
            real_name?: string | undefined;
            phone?: string | undefined;
            skype?: string | undefined;
            real_name_normalized?: string | undefined;
            display_name?: string | undefined;
            display_name_normalized?: string | undefined;
            status_text?: string | undefined;
            status_emoji?: string | undefined;
            status_expiration?: number | undefined;
            avatar_hash?: string | undefined;
            image_original?: string | undefined;
            is_custom_image?: boolean | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            image_24?: string | undefined;
            image_32?: string | undefined;
            image_48?: string | undefined;
            image_72?: string | undefined;
            image_192?: string | undefined;
            image_512?: string | undefined;
            image_1024?: string | undefined;
        }>>;
        is_admin: z.ZodOptional<z.ZodBoolean>;
        is_owner: z.ZodOptional<z.ZodBoolean>;
        is_primary_owner: z.ZodOptional<z.ZodBoolean>;
        is_restricted: z.ZodOptional<z.ZodBoolean>;
        is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
        is_bot: z.ZodOptional<z.ZodBoolean>;
        is_app_user: z.ZodOptional<z.ZodBoolean>;
        updated: z.ZodOptional<z.ZodNumber>;
        has_2fa: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"get_conversation_history">;
    ok: z.ZodBoolean;
    messages: z.ZodOptional<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough">>, "many">>;
    has_more: z.ZodOptional<z.ZodBoolean>;
    response_metadata: z.ZodOptional<z.ZodObject<{
        next_cursor: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        next_cursor: string;
    }, {
        next_cursor: string;
    }>>;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "get_conversation_history";
    ok: boolean;
    response_metadata?: {
        next_cursor: string;
    } | undefined;
    messages?: z.objectOutputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
    has_more?: boolean | undefined;
}, {
    success: boolean;
    error: string;
    operation: "get_conversation_history";
    ok: boolean;
    response_metadata?: {
        next_cursor: string;
    } | undefined;
    messages?: z.objectInputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
    has_more?: boolean | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"update_message">;
    ok: z.ZodBoolean;
    channel: z.ZodOptional<z.ZodString>;
    ts: z.ZodOptional<z.ZodString>;
    text: z.ZodOptional<z.ZodString>;
    message: z.ZodOptional<z.ZodObject<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough">>>;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "update_message";
    ok: boolean;
    message?: z.objectOutputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    channel?: string | undefined;
    text?: string | undefined;
    ts?: string | undefined;
}, {
    success: boolean;
    error: string;
    operation: "update_message";
    ok: boolean;
    message?: z.objectInputType<{
        type: z.ZodString;
        ts: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
        bot_id: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        thread_ts: z.ZodOptional<z.ZodString>;
        parent_user_id: z.ZodOptional<z.ZodString>;
        reply_count: z.ZodOptional<z.ZodNumber>;
        reply_users_count: z.ZodOptional<z.ZodNumber>;
        latest_reply: z.ZodOptional<z.ZodString>;
        reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_locked: z.ZodOptional<z.ZodBoolean>;
        subscribed: z.ZodOptional<z.ZodBoolean>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            users: z.ZodArray<z.ZodString, "many">;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            users: string[];
            count: number;
        }, {
            name: string;
            users: string[];
            count: number;
        }>, "many">>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    channel?: string | undefined;
    text?: string | undefined;
    ts?: string | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"delete_message">;
    ok: z.ZodBoolean;
    channel: z.ZodOptional<z.ZodString>;
    ts: z.ZodOptional<z.ZodString>;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "delete_message";
    ok: boolean;
    channel?: string | undefined;
    ts?: string | undefined;
}, {
    success: boolean;
    error: string;
    operation: "delete_message";
    ok: boolean;
    channel?: string | undefined;
    ts?: string | undefined;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"add_reaction">;
    ok: z.ZodBoolean;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "add_reaction";
    ok: boolean;
}, {
    success: boolean;
    error: string;
    operation: "add_reaction";
    ok: boolean;
}>, z.ZodObject<{
    operation: z.ZodLiteral<"remove_reaction">;
    ok: z.ZodBoolean;
    error: z.ZodString;
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    operation: "remove_reaction";
    ok: boolean;
}, {
    success: boolean;
    error: string;
    operation: "remove_reaction";
    ok: boolean;
}>]>;
type SlackResult = z.output<typeof SlackResultSchema>;
// Monaco-friendly type alias
type SlackParams = z.input<typeof SlackParamsSchema>;;
export type SlackOperationResult<T extends SlackParams['operation']> = Extract<SlackResult, {
    operation: T;
}>;
export declare class SlackBubble<T extends SlackParams = SlackParams> extends ServiceBubble<T, Extract<SlackResult, {
    operation: T['operation'];
}>> {
    readonly type: "service";
    readonly service = "slack";
    readonly authType: "apikey";
    static readonly bubbleName = "slack";
    static readonly schema: z.ZodDiscriminatedUnion<"operation", [z.ZodObject<{
        operation: z.ZodLiteral<"send_message">;
        channel: z.ZodString;
        text: z.ZodString;
        username: z.ZodOptional<z.ZodString>;
        icon_emoji: z.ZodOptional<z.ZodString>;
        icon_url: z.ZodOptional<z.ZodString>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            color: z.ZodOptional<z.ZodString>;
            pretext: z.ZodOptional<z.ZodString>;
            author_name: z.ZodOptional<z.ZodString>;
            author_link: z.ZodOptional<z.ZodString>;
            author_icon: z.ZodOptional<z.ZodString>;
            title: z.ZodOptional<z.ZodString>;
            title_link: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
                title: z.ZodString;
                value: z.ZodString;
                short: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                title: string;
                short?: boolean | undefined;
            }, {
                value: string;
                title: string;
                short?: boolean | undefined;
            }>, "many">>;
            image_url: z.ZodOptional<z.ZodString>;
            thumb_url: z.ZodOptional<z.ZodString>;
            footer: z.ZodOptional<z.ZodString>;
            footer_icon: z.ZodOptional<z.ZodString>;
            ts: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            fields?: {
                value: string;
                title: string;
                short?: boolean | undefined;
            }[] | undefined;
            text?: string | undefined;
            color?: string | undefined;
            pretext?: string | undefined;
            author_name?: string | undefined;
            author_link?: string | undefined;
            author_icon?: string | undefined;
            title?: string | undefined;
            title_link?: string | undefined;
            image_url?: string | undefined;
            thumb_url?: string | undefined;
            footer?: string | undefined;
            footer_icon?: string | undefined;
            ts?: number | undefined;
        }, {
            fields?: {
                value: string;
                title: string;
                short?: boolean | undefined;
            }[] | undefined;
            text?: string | undefined;
            color?: string | undefined;
            pretext?: string | undefined;
            author_name?: string | undefined;
            author_link?: string | undefined;
            author_icon?: string | undefined;
            title?: string | undefined;
            title_link?: string | undefined;
            image_url?: string | undefined;
            thumb_url?: string | undefined;
            footer?: string | undefined;
            footer_icon?: string | undefined;
            ts?: number | undefined;
        }>, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        thread_ts: z.ZodOptional<z.ZodString>;
        reply_broadcast: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
        unfurl_links: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        unfurl_media: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        operation: "send_message";
        channel: string;
        text: string;
        reply_broadcast: boolean;
        unfurl_links: boolean;
        unfurl_media: boolean;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        username?: string | undefined;
        icon_emoji?: string | undefined;
        icon_url?: string | undefined;
        attachments?: {
            fields?: {
                value: string;
                title: string;
                short?: boolean | undefined;
            }[] | undefined;
            text?: string | undefined;
            color?: string | undefined;
            pretext?: string | undefined;
            author_name?: string | undefined;
            author_link?: string | undefined;
            author_icon?: string | undefined;
            title?: string | undefined;
            title_link?: string | undefined;
            image_url?: string | undefined;
            thumb_url?: string | undefined;
            footer?: string | undefined;
            footer_icon?: string | undefined;
            ts?: number | undefined;
        }[] | undefined;
        blocks?: z.objectOutputType<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        thread_ts?: string | undefined;
    }, {
        operation: "send_message";
        channel: string;
        text: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        username?: string | undefined;
        icon_emoji?: string | undefined;
        icon_url?: string | undefined;
        attachments?: {
            fields?: {
                value: string;
                title: string;
                short?: boolean | undefined;
            }[] | undefined;
            text?: string | undefined;
            color?: string | undefined;
            pretext?: string | undefined;
            author_name?: string | undefined;
            author_link?: string | undefined;
            author_icon?: string | undefined;
            title?: string | undefined;
            title_link?: string | undefined;
            image_url?: string | undefined;
            thumb_url?: string | undefined;
            footer?: string | undefined;
            footer_icon?: string | undefined;
            ts?: number | undefined;
        }[] | undefined;
        blocks?: z.objectInputType<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        thread_ts?: string | undefined;
        reply_broadcast?: boolean | undefined;
        unfurl_links?: boolean | undefined;
        unfurl_media?: boolean | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"list_channels">;
        types: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodEnum<["public_channel", "private_channel", "mpim", "im"]>, "many">>>;
        exclude_archived: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        limit: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        cursor: z.ZodOptional<z.ZodString>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        operation: "list_channels";
        types: ("public_channel" | "private_channel" | "mpim" | "im")[];
        exclude_archived: boolean;
        limit: number;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        cursor?: string | undefined;
    }, {
        operation: "list_channels";
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        types?: ("public_channel" | "private_channel" | "mpim" | "im")[] | undefined;
        exclude_archived?: boolean | undefined;
        limit?: number | undefined;
        cursor?: string | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"get_channel_info">;
        channel: z.ZodString;
        include_locale: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        operation: "get_channel_info";
        channel: string;
        include_locale: boolean;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        operation: "get_channel_info";
        channel: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        include_locale?: boolean | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"get_user_info">;
        user: z.ZodString;
        include_locale: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        operation: "get_user_info";
        include_locale: boolean;
        user: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        operation: "get_user_info";
        user: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        include_locale?: boolean | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"list_users">;
        limit: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        cursor: z.ZodOptional<z.ZodString>;
        include_locale: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        operation: "list_users";
        limit: number;
        include_locale: boolean;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        cursor?: string | undefined;
    }, {
        operation: "list_users";
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        limit?: number | undefined;
        cursor?: string | undefined;
        include_locale?: boolean | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"get_conversation_history">;
        channel: z.ZodString;
        latest: z.ZodOptional<z.ZodString>;
        oldest: z.ZodOptional<z.ZodString>;
        inclusive: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        limit: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        cursor: z.ZodOptional<z.ZodString>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        inclusive: boolean;
        operation: "get_conversation_history";
        channel: string;
        limit: number;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        cursor?: string | undefined;
        latest?: string | undefined;
        oldest?: string | undefined;
    }, {
        operation: "get_conversation_history";
        channel: string;
        inclusive?: boolean | undefined;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        limit?: number | undefined;
        cursor?: string | undefined;
        latest?: string | undefined;
        oldest?: string | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"update_message">;
        channel: z.ZodString;
        ts: z.ZodString;
        text: z.ZodOptional<z.ZodString>;
        attachments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            color: z.ZodOptional<z.ZodString>;
            pretext: z.ZodOptional<z.ZodString>;
            author_name: z.ZodOptional<z.ZodString>;
            author_link: z.ZodOptional<z.ZodString>;
            author_icon: z.ZodOptional<z.ZodString>;
            title: z.ZodOptional<z.ZodString>;
            title_link: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
                title: z.ZodString;
                value: z.ZodString;
                short: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                title: string;
                short?: boolean | undefined;
            }, {
                value: string;
                title: string;
                short?: boolean | undefined;
            }>, "many">>;
            image_url: z.ZodOptional<z.ZodString>;
            thumb_url: z.ZodOptional<z.ZodString>;
            footer: z.ZodOptional<z.ZodString>;
            footer_icon: z.ZodOptional<z.ZodString>;
            ts: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            fields?: {
                value: string;
                title: string;
                short?: boolean | undefined;
            }[] | undefined;
            text?: string | undefined;
            color?: string | undefined;
            pretext?: string | undefined;
            author_name?: string | undefined;
            author_link?: string | undefined;
            author_icon?: string | undefined;
            title?: string | undefined;
            title_link?: string | undefined;
            image_url?: string | undefined;
            thumb_url?: string | undefined;
            footer?: string | undefined;
            footer_icon?: string | undefined;
            ts?: number | undefined;
        }, {
            fields?: {
                value: string;
                title: string;
                short?: boolean | undefined;
            }[] | undefined;
            text?: string | undefined;
            color?: string | undefined;
            pretext?: string | undefined;
            author_name?: string | undefined;
            author_link?: string | undefined;
            author_icon?: string | undefined;
            title?: string | undefined;
            title_link?: string | undefined;
            image_url?: string | undefined;
            thumb_url?: string | undefined;
            footer?: string | undefined;
            footer_icon?: string | undefined;
            ts?: number | undefined;
        }>, "many">>;
        blocks: z.ZodOptional<z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        operation: "update_message";
        channel: string;
        ts: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        text?: string | undefined;
        attachments?: {
            fields?: {
                value: string;
                title: string;
                short?: boolean | undefined;
            }[] | undefined;
            text?: string | undefined;
            color?: string | undefined;
            pretext?: string | undefined;
            author_name?: string | undefined;
            author_link?: string | undefined;
            author_icon?: string | undefined;
            title?: string | undefined;
            title_link?: string | undefined;
            image_url?: string | undefined;
            thumb_url?: string | undefined;
            footer?: string | undefined;
            footer_icon?: string | undefined;
            ts?: number | undefined;
        }[] | undefined;
        blocks?: z.objectOutputType<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
    }, {
        operation: "update_message";
        channel: string;
        ts: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        text?: string | undefined;
        attachments?: {
            fields?: {
                value: string;
                title: string;
                short?: boolean | undefined;
            }[] | undefined;
            text?: string | undefined;
            color?: string | undefined;
            pretext?: string | undefined;
            author_name?: string | undefined;
            author_link?: string | undefined;
            author_icon?: string | undefined;
            title?: string | undefined;
            title_link?: string | undefined;
            image_url?: string | undefined;
            thumb_url?: string | undefined;
            footer?: string | undefined;
            footer_icon?: string | undefined;
            ts?: number | undefined;
        }[] | undefined;
        blocks?: z.objectInputType<{
            type: z.ZodString;
            text: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["plain_text", "mrkdwn"]>;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }, {
                type: "plain_text" | "mrkdwn";
                text: string;
            }>>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"delete_message">;
        channel: z.ZodString;
        ts: z.ZodString;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        operation: "delete_message";
        channel: string;
        ts: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        operation: "delete_message";
        channel: string;
        ts: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"add_reaction">;
        name: z.ZodString;
        channel: z.ZodString;
        timestamp: z.ZodString;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        timestamp: string;
        name: string;
        operation: "add_reaction";
        channel: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        timestamp: string;
        name: string;
        operation: "add_reaction";
        channel: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"remove_reaction">;
        name: z.ZodString;
        channel: z.ZodString;
        timestamp: z.ZodString;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        timestamp: string;
        name: string;
        operation: "remove_reaction";
        channel: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        timestamp: string;
        name: string;
        operation: "remove_reaction";
        channel: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }>]>;
    static readonly resultSchema: z.ZodDiscriminatedUnion<"operation", [z.ZodObject<{
        operation: z.ZodLiteral<"send_message">;
        ok: z.ZodBoolean;
        channel: z.ZodOptional<z.ZodString>;
        ts: z.ZodOptional<z.ZodString>;
        message: z.ZodOptional<z.ZodObject<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "send_message";
        ok: boolean;
        message?: z.objectOutputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        channel?: string | undefined;
        ts?: string | undefined;
    }, {
        success: boolean;
        error: string;
        operation: "send_message";
        ok: boolean;
        message?: z.objectInputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        channel?: string | undefined;
        ts?: string | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"list_channels">;
        ok: z.ZodBoolean;
        channels: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        response_metadata: z.ZodOptional<z.ZodObject<{
            next_cursor: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            next_cursor: string;
        }, {
            next_cursor: string;
        }>>;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "list_channels";
        ok: boolean;
        channels?: z.objectOutputType<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        response_metadata?: {
            next_cursor: string;
        } | undefined;
    }, {
        success: boolean;
        error: string;
        operation: "list_channels";
        ok: boolean;
        channels?: z.objectInputType<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        response_metadata?: {
            next_cursor: string;
        } | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"get_channel_info">;
        ok: z.ZodBoolean;
        channel: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>>;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "get_channel_info";
        ok: boolean;
        channel?: z.objectOutputType<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    }, {
        success: boolean;
        error: string;
        operation: "get_channel_info";
        ok: boolean;
        channel?: z.objectInputType<{
            id: z.ZodString;
            name: z.ZodString;
            is_channel: z.ZodOptional<z.ZodBoolean>;
            is_group: z.ZodOptional<z.ZodBoolean>;
            is_im: z.ZodOptional<z.ZodBoolean>;
            is_mpim: z.ZodOptional<z.ZodBoolean>;
            is_private: z.ZodOptional<z.ZodBoolean>;
            created: z.ZodNumber;
            is_archived: z.ZodBoolean;
            is_general: z.ZodOptional<z.ZodBoolean>;
            unlinked: z.ZodOptional<z.ZodNumber>;
            name_normalized: z.ZodOptional<z.ZodString>;
            is_shared: z.ZodOptional<z.ZodBoolean>;
            is_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_org_shared: z.ZodOptional<z.ZodBoolean>;
            shared_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_shared: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            pending_connected_team_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_pending_ext_shared: z.ZodOptional<z.ZodBoolean>;
            is_member: z.ZodOptional<z.ZodBoolean>;
            is_open: z.ZodOptional<z.ZodBoolean>;
            topic: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            purpose: z.ZodOptional<z.ZodObject<{
                value: z.ZodString;
                creator: z.ZodString;
                last_set: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: string;
                creator: string;
                last_set: number;
            }, {
                value: string;
                creator: string;
                last_set: number;
            }>>;
            num_members: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"get_user_info">;
        ok: z.ZodBoolean;
        user: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "get_user_info";
        ok: boolean;
        user?: z.objectOutputType<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    }, {
        success: boolean;
        error: string;
        operation: "get_user_info";
        ok: boolean;
        user?: z.objectInputType<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"list_users">;
        ok: z.ZodBoolean;
        members: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        response_metadata: z.ZodOptional<z.ZodObject<{
            next_cursor: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            next_cursor: string;
        }, {
            next_cursor: string;
        }>>;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "list_users";
        ok: boolean;
        response_metadata?: {
            next_cursor: string;
        } | undefined;
        members?: z.objectOutputType<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
    }, {
        success: boolean;
        error: string;
        operation: "list_users";
        ok: boolean;
        response_metadata?: {
            next_cursor: string;
        } | undefined;
        members?: z.objectInputType<{
            id: z.ZodString;
            team_id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            deleted: z.ZodOptional<z.ZodBoolean>;
            color: z.ZodOptional<z.ZodString>;
            real_name: z.ZodOptional<z.ZodString>;
            tz: z.ZodOptional<z.ZodString>;
            tz_label: z.ZodOptional<z.ZodString>;
            tz_offset: z.ZodOptional<z.ZodNumber>;
            profile: z.ZodOptional<z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                phone: z.ZodOptional<z.ZodString>;
                skype: z.ZodOptional<z.ZodString>;
                real_name: z.ZodOptional<z.ZodString>;
                real_name_normalized: z.ZodOptional<z.ZodString>;
                display_name: z.ZodOptional<z.ZodString>;
                display_name_normalized: z.ZodOptional<z.ZodString>;
                fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                status_text: z.ZodOptional<z.ZodString>;
                status_emoji: z.ZodOptional<z.ZodString>;
                status_expiration: z.ZodOptional<z.ZodNumber>;
                avatar_hash: z.ZodOptional<z.ZodString>;
                image_original: z.ZodOptional<z.ZodString>;
                is_custom_image: z.ZodOptional<z.ZodBoolean>;
                email: z.ZodOptional<z.ZodString>;
                first_name: z.ZodOptional<z.ZodString>;
                last_name: z.ZodOptional<z.ZodString>;
                image_24: z.ZodOptional<z.ZodString>;
                image_32: z.ZodOptional<z.ZodString>;
                image_48: z.ZodOptional<z.ZodString>;
                image_72: z.ZodOptional<z.ZodString>;
                image_192: z.ZodOptional<z.ZodString>;
                image_512: z.ZodOptional<z.ZodString>;
                image_1024: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }, {
                email?: string | undefined;
                fields?: Record<string, unknown> | undefined;
                title?: string | undefined;
                real_name?: string | undefined;
                phone?: string | undefined;
                skype?: string | undefined;
                real_name_normalized?: string | undefined;
                display_name?: string | undefined;
                display_name_normalized?: string | undefined;
                status_text?: string | undefined;
                status_emoji?: string | undefined;
                status_expiration?: number | undefined;
                avatar_hash?: string | undefined;
                image_original?: string | undefined;
                is_custom_image?: boolean | undefined;
                first_name?: string | undefined;
                last_name?: string | undefined;
                image_24?: string | undefined;
                image_32?: string | undefined;
                image_48?: string | undefined;
                image_72?: string | undefined;
                image_192?: string | undefined;
                image_512?: string | undefined;
                image_1024?: string | undefined;
            }>>;
            is_admin: z.ZodOptional<z.ZodBoolean>;
            is_owner: z.ZodOptional<z.ZodBoolean>;
            is_primary_owner: z.ZodOptional<z.ZodBoolean>;
            is_restricted: z.ZodOptional<z.ZodBoolean>;
            is_ultra_restricted: z.ZodOptional<z.ZodBoolean>;
            is_bot: z.ZodOptional<z.ZodBoolean>;
            is_app_user: z.ZodOptional<z.ZodBoolean>;
            updated: z.ZodOptional<z.ZodNumber>;
            has_2fa: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"get_conversation_history">;
        ok: z.ZodBoolean;
        messages: z.ZodOptional<z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        has_more: z.ZodOptional<z.ZodBoolean>;
        response_metadata: z.ZodOptional<z.ZodObject<{
            next_cursor: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            next_cursor: string;
        }, {
            next_cursor: string;
        }>>;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "get_conversation_history";
        ok: boolean;
        response_metadata?: {
            next_cursor: string;
        } | undefined;
        messages?: z.objectOutputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        has_more?: boolean | undefined;
    }, {
        success: boolean;
        error: string;
        operation: "get_conversation_history";
        ok: boolean;
        response_metadata?: {
            next_cursor: string;
        } | undefined;
        messages?: z.objectInputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        has_more?: boolean | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"update_message">;
        ok: z.ZodBoolean;
        channel: z.ZodOptional<z.ZodString>;
        ts: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        message: z.ZodOptional<z.ZodObject<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "update_message";
        ok: boolean;
        message?: z.objectOutputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        channel?: string | undefined;
        text?: string | undefined;
        ts?: string | undefined;
    }, {
        success: boolean;
        error: string;
        operation: "update_message";
        ok: boolean;
        message?: z.objectInputType<{
            type: z.ZodString;
            ts: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
            bot_id: z.ZodOptional<z.ZodString>;
            text: z.ZodOptional<z.ZodString>;
            thread_ts: z.ZodOptional<z.ZodString>;
            parent_user_id: z.ZodOptional<z.ZodString>;
            reply_count: z.ZodOptional<z.ZodNumber>;
            reply_users_count: z.ZodOptional<z.ZodNumber>;
            latest_reply: z.ZodOptional<z.ZodString>;
            reply_users: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            is_locked: z.ZodOptional<z.ZodBoolean>;
            subscribed: z.ZodOptional<z.ZodBoolean>;
            attachments: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            blocks: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            reactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                users: z.ZodArray<z.ZodString, "many">;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: string;
                users: string[];
                count: number;
            }, {
                name: string;
                users: string[];
                count: number;
            }>, "many">>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        channel?: string | undefined;
        text?: string | undefined;
        ts?: string | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"delete_message">;
        ok: z.ZodBoolean;
        channel: z.ZodOptional<z.ZodString>;
        ts: z.ZodOptional<z.ZodString>;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "delete_message";
        ok: boolean;
        channel?: string | undefined;
        ts?: string | undefined;
    }, {
        success: boolean;
        error: string;
        operation: "delete_message";
        ok: boolean;
        channel?: string | undefined;
        ts?: string | undefined;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"add_reaction">;
        ok: z.ZodBoolean;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "add_reaction";
        ok: boolean;
    }, {
        success: boolean;
        error: string;
        operation: "add_reaction";
        ok: boolean;
    }>, z.ZodObject<{
        operation: z.ZodLiteral<"remove_reaction">;
        ok: z.ZodBoolean;
        error: z.ZodString;
        success: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        operation: "remove_reaction";
        ok: boolean;
    }, {
        success: boolean;
        error: string;
        operation: "remove_reaction";
        ok: boolean;
    }>]>;
    static readonly shortDescription = "Slack integration for messaging and workspace management";
    static readonly longDescription = "\n    Comprehensive Slack integration bubble for managing messages, channels, and users.\n    Use cases:\n    - Send messages to channels or direct messages\n    - Retrieve channel information and list channels\n    - Get user information and list workspace members\n    - Manage conversation history and message operations\n    - Add/remove reactions and manage message interactions\n    \n    Security Features:\n    - Token-based authentication\n    - Parameter validation and sanitization\n    - Rate limiting awareness\n    - Comprehensive error handling\n  ";
    static readonly alias = "slack";
    constructor(params: T, context?: BubbleContext);
    protected performAction(context?: BubbleContext): Promise<Extract<SlackResult, {
        operation: T['operation'];
    }>>;
    private sendMessage;
    private listChannels;
    private getChannelInfo;
    private getUserInfo;
    private listUsers;
    private getConversationHistory;
    private updateMessage;
    private deleteMessage;
    private addReaction;
    private removeReaction;
    protected chooseCredential(): string | undefined;
    private makeSlackApiCall;
}
export {};

// Inlined from ./bubbles/workflow-bubble/database-analyzer.workflow.js

// Inlined from ../../types/workflow-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

/**
 * WorkflowBubble - Higher-level abstraction that orchestrates ServiceBubbles
 * to create common, reusable workflow patterns.
 *
 * Key principles:
 * - User-friendly parameter names with clear purpose
 * - TypeScript type safety with helpful intellisense
 * - Composable patterns that reduce BubbleFlow complexity
 * - Error handling and validation at workflow level
 */
export declare abstract class WorkflowBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'workflow';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the workflow - orchestrates multiple ServiceBubbles
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method that subclasses must implement
     * This orchestrates the workflow by calling multiple ServiceBubbles
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ../../types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// Inlined from ../../types/credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

declare const DatabaseAnalyzerParamsSchema: z.ZodObject<{
    /**
     * The data source service to analyze (currently supports 'postgresql')
     */
    dataSourceType: z.ZodEnum<["postgresql"]>;
    /**
     * Whether to ignore SSL certificate errors when connecting
     */
    ignoreSSLErrors: z.ZodDefault<z.ZodBoolean>;
    /**
     * Include additional metadata like enum values and constraints
     */
    includeMetadata: z.ZodDefault<z.ZodBoolean>;
    /**
     * Injected credentials from the system
     */
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    dataSourceType: "postgresql";
    ignoreSSLErrors: boolean;
    includeMetadata: boolean;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    dataSourceType: "postgresql";
    ignoreSSLErrors?: boolean | undefined;
    includeMetadata?: boolean | undefined;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}>;
declare const DatabaseAnalyzerResultSchema: z.ZodObject<{
    success: z.ZodBoolean;
    error: z.ZodString;
    /**
     * The analyzed database schema in structured format
     */
    databaseSchema: z.ZodOptional<z.ZodObject<{
        /**
         * Raw schema data as returned by the database
         */
        rawData: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>, "many">>;
        /**
         * Cleaned JSON string representation of the schema
         */
        cleanedJSON: z.ZodOptional<z.ZodString>;
        /**
         * Number of tables found
         */
        tableCount: z.ZodOptional<z.ZodNumber>;
        /**
         * List of table names
         */
        tableNames: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        rawData?: Record<string, unknown>[] | undefined;
        cleanedJSON?: string | undefined;
        tableCount?: number | undefined;
        tableNames?: string[] | undefined;
    }, {
        rawData?: Record<string, unknown>[] | undefined;
        cleanedJSON?: string | undefined;
        tableCount?: number | undefined;
        tableNames?: string[] | undefined;
    }>>;
    /**
     * Summary of the analysis operation
     */
    analysisSummary: z.ZodOptional<z.ZodObject<{
        dataSourceType: z.ZodString;
        connectionSuccessful: z.ZodBoolean;
        analysisTimestamp: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        dataSourceType: string;
        connectionSuccessful: boolean;
        analysisTimestamp: Date;
    }, {
        dataSourceType: string;
        connectionSuccessful: boolean;
        analysisTimestamp: Date;
    }>>;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    databaseSchema?: {
        rawData?: Record<string, unknown>[] | undefined;
        cleanedJSON?: string | undefined;
        tableCount?: number | undefined;
        tableNames?: string[] | undefined;
    } | undefined;
    analysisSummary?: {
        dataSourceType: string;
        connectionSuccessful: boolean;
        analysisTimestamp: Date;
    } | undefined;
}, {
    success: boolean;
    error: string;
    databaseSchema?: {
        rawData?: Record<string, unknown>[] | undefined;
        cleanedJSON?: string | undefined;
        tableCount?: number | undefined;
        tableNames?: string[] | undefined;
    } | undefined;
    analysisSummary?: {
        dataSourceType: string;
        connectionSuccessful: boolean;
        analysisTimestamp: Date;
    } | undefined;
}>;
type DatabaseAnalyzerResult = z.output<typeof DatabaseAnalyzerResultSchema>;
// Monaco-friendly type alias
type DatabaseAnalyzerParamsInput = z.input<typeof DatabaseAnalyzerParamsSchema>;;
type DatabaseAnalyzerParams = z.output<typeof DatabaseAnalyzerParamsSchema>;
/**
 * DatabaseAnalyzerWorkflowBubble - Analyzes database schema structure
 *
 * This workflow bubble simplifies database schema analysis by:
 * 1. Connecting to the specified database
 * 2. Querying the information schema to get table/column structure
 * 3. Extracting metadata like enum values and constraints
 * 4. Returning structured schema information ready for AI analysis
 *
 * Common use cases:
 * - Data discovery and cataloging
 * - Generating queries based on schema structure
 * - Database documentation generation
 * - AI-powered data analysis preparation
 */
export declare class DatabaseAnalyzerWorkflowBubble extends WorkflowBubble<DatabaseAnalyzerParams, DatabaseAnalyzerResult> {
    static readonly bubbleName = "database-analyzer";
    static readonly schema: z.ZodObject<{
        /**
         * The data source service to analyze (currently supports 'postgresql')
         */
        dataSourceType: z.ZodEnum<["postgresql"]>;
        /**
         * Whether to ignore SSL certificate errors when connecting
         */
        ignoreSSLErrors: z.ZodDefault<z.ZodBoolean>;
        /**
         * Include additional metadata like enum values and constraints
         */
        includeMetadata: z.ZodDefault<z.ZodBoolean>;
        /**
         * Injected credentials from the system
         */
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        dataSourceType: "postgresql";
        ignoreSSLErrors: boolean;
        includeMetadata: boolean;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        dataSourceType: "postgresql";
        ignoreSSLErrors?: boolean | undefined;
        includeMetadata?: boolean | undefined;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }>;
    static readonly resultSchema: z.ZodObject<{
        success: z.ZodBoolean;
        error: z.ZodString;
        /**
         * The analyzed database schema in structured format
         */
        databaseSchema: z.ZodOptional<z.ZodObject<{
            /**
             * Raw schema data as returned by the database
             */
            rawData: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>, "many">>;
            /**
             * Cleaned JSON string representation of the schema
             */
            cleanedJSON: z.ZodOptional<z.ZodString>;
            /**
             * Number of tables found
             */
            tableCount: z.ZodOptional<z.ZodNumber>;
            /**
             * List of table names
             */
            tableNames: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            rawData?: Record<string, unknown>[] | undefined;
            cleanedJSON?: string | undefined;
            tableCount?: number | undefined;
            tableNames?: string[] | undefined;
        }, {
            rawData?: Record<string, unknown>[] | undefined;
            cleanedJSON?: string | undefined;
            tableCount?: number | undefined;
            tableNames?: string[] | undefined;
        }>>;
        /**
         * Summary of the analysis operation
         */
        analysisSummary: z.ZodOptional<z.ZodObject<{
            dataSourceType: z.ZodString;
            connectionSuccessful: z.ZodBoolean;
            analysisTimestamp: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            dataSourceType: string;
            connectionSuccessful: boolean;
            analysisTimestamp: Date;
        }, {
            dataSourceType: string;
            connectionSuccessful: boolean;
            analysisTimestamp: Date;
        }>>;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        databaseSchema?: {
            rawData?: Record<string, unknown>[] | undefined;
            cleanedJSON?: string | undefined;
            tableCount?: number | undefined;
            tableNames?: string[] | undefined;
        } | undefined;
        analysisSummary?: {
            dataSourceType: string;
            connectionSuccessful: boolean;
            analysisTimestamp: Date;
        } | undefined;
    }, {
        success: boolean;
        error: string;
        databaseSchema?: {
            rawData?: Record<string, unknown>[] | undefined;
            cleanedJSON?: string | undefined;
            tableCount?: number | undefined;
            tableNames?: string[] | undefined;
        } | undefined;
        analysisSummary?: {
            dataSourceType: string;
            connectionSuccessful: boolean;
            analysisTimestamp: Date;
        } | undefined;
    }>;
    static readonly shortDescription = "Analyzes database schema structure and metadata";
    static readonly longDescription = "Connects to a database and extracts comprehensive schema information including tables, columns, data types, constraints, and enum values. Perfect for AI-powered data analysis, query generation, and database documentation. Currently supports PostgreSQL with plans for additional database types.";
    static readonly alias = "analyze-db";
    constructor(params: DatabaseAnalyzerParamsInput, context?: BubbleContext);
    protected performAction(_context?: BubbleContext): Promise<DatabaseAnalyzerResult>;
    /**
     * Builds the PostgreSQL schema query based on metadata requirements
     */
    private buildPostgreSQLSchemaQuery;
}
export {};

// Inlined from ./bubbles/workflow-bubble/slack-notifier.workflow.js

// Inlined from ../../types/workflow-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

/**
 * WorkflowBubble - Higher-level abstraction that orchestrates ServiceBubbles
 * to create common, reusable workflow patterns.
 *
 * Key principles:
 * - User-friendly parameter names with clear purpose
 * - TypeScript type safety with helpful intellisense
 * - Composable patterns that reduce BubbleFlow complexity
 * - Error handling and validation at workflow level
 */
export declare abstract class WorkflowBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'workflow';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the workflow - orchestrates multiple ServiceBubbles
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method that subclasses must implement
     * This orchestrates the workflow by calling multiple ServiceBubbles
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ../../types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// Inlined from ../../types/credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

declare const SlackNotifierParamsSchema: z.ZodObject<{
    /**
     * The raw data or content to be formatted for Slack notification
     */
    contentToFormat: z.ZodString;
    /**
     * The original user query or context that generated this content
     */
    originalUserQuery: z.ZodOptional<z.ZodString>;
    /**
     * Target Slack channel name (without #) or channel ID
     */
    targetChannel: z.ZodString;
    /**
     * Optional custom message title/header for the notification
     */
    messageTitle: z.ZodOptional<z.ZodString>;
    /**
     * Tone and style for the AI formatting (professional, casual, technical, etc.)
     */
    messageStyle: z.ZodDefault<z.ZodEnum<["professional", "casual", "technical", "concise", "detailed"]>>;
    /**
     * Whether to include emojis and rich formatting in the message
     */
    includeFormatting: z.ZodDefault<z.ZodBoolean>;
    /**
     * Maximum message length (Slack has limits)
     */
    maxMessageLength: z.ZodDefault<z.ZodNumber>;
    /**
     * AI model configuration for content formatting
     */
    aiModel: z.ZodOptional<z.ZodObject<{
        model: z.ZodDefault<z.ZodEnum<["openai/gpt-4o", "openai/gpt-4", "openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "openai/gpt-3.5-turbo-16k", "google/gemini-2.5-pro", "google/gemini-2.5-flash", "google/gemini-2.5-flash-lite", "google/gemini-2.0-flash-exp", "google/gemini-pro", "google/gemini-pro-vision", "google/gemini-1.5-pro", "google/gemini-1.5-flash"]>>;
        temperature: z.ZodDefault<z.ZodNumber>;
        maxTokens: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
        temperature: number;
        maxTokens: number;
    }, {
        model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
        temperature?: number | undefined;
        maxTokens?: number | undefined;
    }>>;
    /**
     * Injected credentials from the system
     */
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    contentToFormat: string;
    targetChannel: string;
    messageStyle: "professional" | "casual" | "technical" | "concise" | "detailed";
    includeFormatting: boolean;
    maxMessageLength: number;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    originalUserQuery?: string | undefined;
    messageTitle?: string | undefined;
    aiModel?: {
        model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
        temperature: number;
        maxTokens: number;
    } | undefined;
}, {
    contentToFormat: string;
    targetChannel: string;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
    originalUserQuery?: string | undefined;
    messageTitle?: string | undefined;
    messageStyle?: "professional" | "casual" | "technical" | "concise" | "detailed" | undefined;
    includeFormatting?: boolean | undefined;
    maxMessageLength?: number | undefined;
    aiModel?: {
        model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
        temperature?: number | undefined;
        maxTokens?: number | undefined;
    } | undefined;
}>;
// Monaco-friendly type alias
type SlackNotifierParamsInput = z.input<typeof SlackNotifierParamsSchema>;;
type SlackNotifierParams = z.output<typeof SlackNotifierParamsSchema>;
declare const SlackNotifierResultSchema: z.ZodObject<{
    success: z.ZodBoolean;
    error: z.ZodString;
    /**
     * Information about the sent Slack message
     */
    messageInfo: z.ZodOptional<z.ZodObject<{
        /**
         * Slack message timestamp (unique identifier)
         */
        messageTimestamp: z.ZodOptional<z.ZodString>;
        /**
         * Channel ID where message was sent
         */
        channelId: z.ZodOptional<z.ZodString>;
        /**
         * Channel name where message was sent
         */
        channelName: z.ZodOptional<z.ZodString>;
        /**
         * The formatted message that was sent
         */
        formattedMessage: z.ZodOptional<z.ZodString>;
        /**
         * Message length in characters
         */
        messageLength: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        messageTimestamp?: string | undefined;
        channelId?: string | undefined;
        channelName?: string | undefined;
        formattedMessage?: string | undefined;
        messageLength?: number | undefined;
    }, {
        messageTimestamp?: string | undefined;
        channelId?: string | undefined;
        channelName?: string | undefined;
        formattedMessage?: string | undefined;
        messageLength?: number | undefined;
    }>>;
    /**
     * AI formatting process information
     */
    formattingInfo: z.ZodOptional<z.ZodObject<{
        /**
         * AI model used for formatting
         */
        modelUsed: z.ZodOptional<z.ZodString>;
        /**
         * Whether content was truncated due to length limits
         */
        wasTruncated: z.ZodDefault<z.ZodBoolean>;
        /**
         * Original content length before formatting
         */
        originalLength: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        wasTruncated: boolean;
        modelUsed?: string | undefined;
        originalLength?: number | undefined;
    }, {
        modelUsed?: string | undefined;
        wasTruncated?: boolean | undefined;
        originalLength?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    messageInfo?: {
        messageTimestamp?: string | undefined;
        channelId?: string | undefined;
        channelName?: string | undefined;
        formattedMessage?: string | undefined;
        messageLength?: number | undefined;
    } | undefined;
    formattingInfo?: {
        wasTruncated: boolean;
        modelUsed?: string | undefined;
        originalLength?: number | undefined;
    } | undefined;
}, {
    success: boolean;
    error: string;
    messageInfo?: {
        messageTimestamp?: string | undefined;
        channelId?: string | undefined;
        channelName?: string | undefined;
        formattedMessage?: string | undefined;
        messageLength?: number | undefined;
    } | undefined;
    formattingInfo?: {
        modelUsed?: string | undefined;
        wasTruncated?: boolean | undefined;
        originalLength?: number | undefined;
    } | undefined;
}>;
type SlackNotifierResult = z.infer<typeof SlackNotifierResultSchema>;
/**
 * SlackNotifierWorkflowBubble - AI-powered Slack message formatting and delivery
 *
 * This workflow bubble simplifies Slack notifications by:
 * 1. Taking raw content/data and formatting it with AI for better readability
 * 2. Finding the target Slack channel (by name or ID)
 * 3. Sending the beautifully formatted message to the channel
 * 4. Providing delivery confirmation and message metadata
 *
 * Common use cases:
 * - Data analysis results notification
 * - Automated report delivery
 * - System alerts and status updates
 * - AI-generated content distribution
 * - Business intelligence dashboards
 */
export declare class SlackNotifierWorkflowBubble extends WorkflowBubble<SlackNotifierParams, SlackNotifierResult> {
    static readonly bubbleName = "slack-notifier";
    static readonly schema: z.ZodObject<{
        /**
         * The raw data or content to be formatted for Slack notification
         */
        contentToFormat: z.ZodString;
        /**
         * The original user query or context that generated this content
         */
        originalUserQuery: z.ZodOptional<z.ZodString>;
        /**
         * Target Slack channel name (without #) or channel ID
         */
        targetChannel: z.ZodString;
        /**
         * Optional custom message title/header for the notification
         */
        messageTitle: z.ZodOptional<z.ZodString>;
        /**
         * Tone and style for the AI formatting (professional, casual, technical, etc.)
         */
        messageStyle: z.ZodDefault<z.ZodEnum<["professional", "casual", "technical", "concise", "detailed"]>>;
        /**
         * Whether to include emojis and rich formatting in the message
         */
        includeFormatting: z.ZodDefault<z.ZodBoolean>;
        /**
         * Maximum message length (Slack has limits)
         */
        maxMessageLength: z.ZodDefault<z.ZodNumber>;
        /**
         * AI model configuration for content formatting
         */
        aiModel: z.ZodOptional<z.ZodObject<{
            model: z.ZodDefault<z.ZodEnum<["openai/gpt-4o", "openai/gpt-4", "openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "openai/gpt-3.5-turbo-16k", "google/gemini-2.5-pro", "google/gemini-2.5-flash", "google/gemini-2.5-flash-lite", "google/gemini-2.0-flash-exp", "google/gemini-pro", "google/gemini-pro-vision", "google/gemini-1.5-pro", "google/gemini-1.5-flash"]>>;
            temperature: z.ZodDefault<z.ZodNumber>;
            maxTokens: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
            temperature: number;
            maxTokens: number;
        }, {
            model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
            temperature?: number | undefined;
            maxTokens?: number | undefined;
        }>>;
        /**
         * Injected credentials from the system
         */
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        contentToFormat: string;
        targetChannel: string;
        messageStyle: "professional" | "casual" | "technical" | "concise" | "detailed";
        includeFormatting: boolean;
        maxMessageLength: number;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        originalUserQuery?: string | undefined;
        messageTitle?: string | undefined;
        aiModel?: {
            model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
            temperature: number;
            maxTokens: number;
        } | undefined;
    }, {
        contentToFormat: string;
        targetChannel: string;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
        originalUserQuery?: string | undefined;
        messageTitle?: string | undefined;
        messageStyle?: "professional" | "casual" | "technical" | "concise" | "detailed" | undefined;
        includeFormatting?: boolean | undefined;
        maxMessageLength?: number | undefined;
        aiModel?: {
            model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
            temperature?: number | undefined;
            maxTokens?: number | undefined;
        } | undefined;
    }>;
    static readonly resultSchema: z.ZodObject<{
        success: z.ZodBoolean;
        error: z.ZodString;
        /**
         * Information about the sent Slack message
         */
        messageInfo: z.ZodOptional<z.ZodObject<{
            /**
             * Slack message timestamp (unique identifier)
             */
            messageTimestamp: z.ZodOptional<z.ZodString>;
            /**
             * Channel ID where message was sent
             */
            channelId: z.ZodOptional<z.ZodString>;
            /**
             * Channel name where message was sent
             */
            channelName: z.ZodOptional<z.ZodString>;
            /**
             * The formatted message that was sent
             */
            formattedMessage: z.ZodOptional<z.ZodString>;
            /**
             * Message length in characters
             */
            messageLength: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            messageTimestamp?: string | undefined;
            channelId?: string | undefined;
            channelName?: string | undefined;
            formattedMessage?: string | undefined;
            messageLength?: number | undefined;
        }, {
            messageTimestamp?: string | undefined;
            channelId?: string | undefined;
            channelName?: string | undefined;
            formattedMessage?: string | undefined;
            messageLength?: number | undefined;
        }>>;
        /**
         * AI formatting process information
         */
        formattingInfo: z.ZodOptional<z.ZodObject<{
            /**
             * AI model used for formatting
             */
            modelUsed: z.ZodOptional<z.ZodString>;
            /**
             * Whether content was truncated due to length limits
             */
            wasTruncated: z.ZodDefault<z.ZodBoolean>;
            /**
             * Original content length before formatting
             */
            originalLength: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            wasTruncated: boolean;
            modelUsed?: string | undefined;
            originalLength?: number | undefined;
        }, {
            modelUsed?: string | undefined;
            wasTruncated?: boolean | undefined;
            originalLength?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        messageInfo?: {
            messageTimestamp?: string | undefined;
            channelId?: string | undefined;
            channelName?: string | undefined;
            formattedMessage?: string | undefined;
            messageLength?: number | undefined;
        } | undefined;
        formattingInfo?: {
            wasTruncated: boolean;
            modelUsed?: string | undefined;
            originalLength?: number | undefined;
        } | undefined;
    }, {
        success: boolean;
        error: string;
        messageInfo?: {
            messageTimestamp?: string | undefined;
            channelId?: string | undefined;
            channelName?: string | undefined;
            formattedMessage?: string | undefined;
            messageLength?: number | undefined;
        } | undefined;
        formattingInfo?: {
            modelUsed?: string | undefined;
            wasTruncated?: boolean | undefined;
            originalLength?: number | undefined;
        } | undefined;
    }>;
    static readonly shortDescription = "AI-powered Slack message formatting and delivery";
    static readonly longDescription = "Intelligently formats raw content using AI and delivers it as a well-structured Slack message. Perfect for data analysis results, automated reports, system notifications, and business intelligence updates. Handles channel discovery, message formatting, length limits, and delivery confirmation.";
    static readonly alias = "notify-slack";
    constructor(params: SlackNotifierParamsInput, context?: BubbleContext);
    protected performAction(): Promise<SlackNotifierResult>;
    /**
     * Find the target Slack channel by name or ID
     */
    private findSlackChannel;
    /**
     * Format content using AI for better Slack presentation
     */
    private formatContentWithAI;
    /**
     * Send the formatted message to Slack
     */
    private sendToSlack;
    /**
     * Build the AI formatting prompt based on parameters
     */
    private buildFormattingPrompt;
}
export {};

// Inlined from ./bubbles/workflow-bubble/data-analyst.workflow.js

// Inlined from ../../types/workflow-bubble-class.js

// Inlined from ./bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

/**
 * WorkflowBubble - Higher-level abstraction that orchestrates ServiceBubbles
 * to create common, reusable workflow patterns.
 *
 * Key principles:
 * - User-friendly parameter names with clear purpose
 * - TypeScript type safety with helpful intellisense
 * - Composable patterns that reduce BubbleFlow complexity
 * - Error handling and validation at workflow level
 */
export declare abstract class WorkflowBubble<TParams extends ServiceBubbleParams = ServiceBubbleParams, TResult extends BubbleOperationResult = BubbleOperationResult> {
    readonly name: string;
    readonly schema: z.ZodObject<z.ZodRawShape>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
    readonly type: 'workflow';
    protected readonly params: TParams;
    private context?;
    constructor(params: unknown, context?: BubbleContext);
    /**
     * Execute the workflow - orchestrates multiple ServiceBubbles
     */
    action(): Promise<BubbleResult<TResult>>;
    /**
     * Abstract method that subclasses must implement
     * This orchestrates the workflow by calling multiple ServiceBubbles
     */
    protected abstract performAction(context?: BubbleContext): Promise<TResult>;
    /**
     * Get the current parameters
     */
    get currentParams(): TParams;
    /**
     * Get the current context
     */
    get currentContext(): BubbleContext | undefined;
}

// Inlined from ../../types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// Inlined from ../../types/credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export declare const AvailableModels: z.ZodEnum<["openai/gpt-4o", "openai/gpt-4", "openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "openai/gpt-3.5-turbo-16k", "google/gemini-2.5-pro", "google/gemini-2.5-flash", "google/gemini-2.5-flash-lite", "google/gemini-2.0-flash-exp", "google/gemini-pro", "google/gemini-pro-vision", "google/gemini-1.5-pro", "google/gemini-1.5-flash"]>;
declare const DataAnalystWorkflowParamsSchema: z.ZodObject<{
    dataSourceType: z.ZodDefault<z.ZodEnum<["postgresql"]>>;
    userQuestion: z.ZodString;
    analysisDepth: z.ZodDefault<z.ZodEnum<["basic", "detailed", "comprehensive"]>>;
    targetAudience: z.ZodDefault<z.ZodEnum<["technical", "business", "executive"]>>;
    includeInsights: z.ZodDefault<z.ZodBoolean>;
    aiPersonality: z.ZodDefault<z.ZodEnum<["professional", "friendly", "direct", "analytical", "conversational"]>>;
    maxQueries: z.ZodDefault<z.ZodNumber>;
    queryTimeout: z.ZodDefault<z.ZodNumber>;
    aiModel: z.ZodDefault<z.ZodObject<{
        model: z.ZodDefault<z.ZodEnum<["openai/gpt-4o", "openai/gpt-4", "openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "openai/gpt-3.5-turbo-16k", "google/gemini-2.5-pro", "google/gemini-2.5-flash", "google/gemini-2.5-flash-lite", "google/gemini-2.0-flash-exp", "google/gemini-pro", "google/gemini-pro-vision", "google/gemini-1.5-pro", "google/gemini-1.5-flash"]>>;
        temperature: z.ZodDefault<z.ZodNumber>;
        maxTokens: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
        temperature: number;
        maxTokens: number;
    }, {
        model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
        temperature?: number | undefined;
        maxTokens?: number | undefined;
    }>>;
    ignoreSSLErrors: z.ZodDefault<z.ZodBoolean>;
    additionalContext: z.ZodOptional<z.ZodString>;
    credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    dataSourceType: "postgresql";
    userQuestion: string;
    analysisDepth: "basic" | "detailed" | "comprehensive";
    targetAudience: "technical" | "business" | "executive";
    includeInsights: boolean;
    aiPersonality: "professional" | "friendly" | "direct" | "analytical" | "conversational";
    maxQueries: number;
    queryTimeout: number;
    aiModel: {
        model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
        temperature: number;
        maxTokens: number;
    };
    ignoreSSLErrors: boolean;
    additionalContext?: string | undefined;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}, {
    userQuestion: string;
    dataSourceType?: "postgresql" | undefined;
    analysisDepth?: "basic" | "detailed" | "comprehensive" | undefined;
    targetAudience?: "technical" | "business" | "executive" | undefined;
    includeInsights?: boolean | undefined;
    aiPersonality?: "professional" | "friendly" | "direct" | "analytical" | "conversational" | undefined;
    maxQueries?: number | undefined;
    queryTimeout?: number | undefined;
    aiModel?: {
        model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
        temperature?: number | undefined;
        maxTokens?: number | undefined;
    } | undefined;
    ignoreSSLErrors?: boolean | undefined;
    additionalContext?: string | undefined;
    credentials?: Partial<Record<CredentialType, string>> | undefined;
}>;
declare const DataAnalystWorkflowResultSchema: z.ZodObject<{
    success: z.ZodBoolean;
    error: z.ZodString;
    directAnswer: z.ZodOptional<z.ZodString>;
    insights: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    recommendations: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    queriesExecuted: z.ZodOptional<z.ZodArray<z.ZodObject<{
        queryNumber: z.ZodNumber;
        query: z.ZodString;
        reasoning: z.ZodString;
        resultSummary: z.ZodString;
        executionTime: z.ZodNumber;
        rowCount: z.ZodNumber;
        success: z.ZodBoolean;
        error: z.ZodOptional<z.ZodString>;
        timestamp: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        queryNumber: number;
        query: string;
        reasoning: string;
        resultSummary: string;
        executionTime: number;
        rowCount: number;
        timestamp: Date;
        error?: string | undefined;
    }, {
        success: boolean;
        queryNumber: number;
        query: string;
        reasoning: string;
        resultSummary: string;
        executionTime: number;
        rowCount: number;
        timestamp: Date;
        error?: string | undefined;
    }>, "many">>;
    analysisMetadata: z.ZodOptional<z.ZodObject<{
        totalQueries: z.ZodNumber;
        totalExecutionTime: z.ZodNumber;
        dataPointsAnalyzed: z.ZodNumber;
        confidence: z.ZodEnum<["high", "medium", "low"]>;
        analysisTimestamp: z.ZodDate;
        targetAudience: z.ZodString;
        analysisDepth: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        analysisDepth: string;
        targetAudience: string;
        totalQueries: number;
        totalExecutionTime: number;
        dataPointsAnalyzed: number;
        confidence: "high" | "medium" | "low";
        analysisTimestamp: Date;
    }, {
        analysisDepth: string;
        targetAudience: string;
        totalQueries: number;
        totalExecutionTime: number;
        dataPointsAnalyzed: number;
        confidence: "high" | "medium" | "low";
        analysisTimestamp: Date;
    }>>;
    rawAgentResponse: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error: string;
    directAnswer?: string | undefined;
    insights?: string[] | undefined;
    recommendations?: string[] | undefined;
    queriesExecuted?: {
        success: boolean;
        queryNumber: number;
        query: string;
        reasoning: string;
        resultSummary: string;
        executionTime: number;
        rowCount: number;
        timestamp: Date;
        error?: string | undefined;
    }[] | undefined;
    analysisMetadata?: {
        analysisDepth: string;
        targetAudience: string;
        totalQueries: number;
        totalExecutionTime: number;
        dataPointsAnalyzed: number;
        confidence: "high" | "medium" | "low";
        analysisTimestamp: Date;
    } | undefined;
    rawAgentResponse?: string | undefined;
}, {
    success: boolean;
    error: string;
    directAnswer?: string | undefined;
    insights?: string[] | undefined;
    recommendations?: string[] | undefined;
    queriesExecuted?: {
        success: boolean;
        queryNumber: number;
        query: string;
        reasoning: string;
        resultSummary: string;
        executionTime: number;
        rowCount: number;
        timestamp: Date;
        error?: string | undefined;
    }[] | undefined;
    analysisMetadata?: {
        analysisDepth: string;
        targetAudience: string;
        totalQueries: number;
        totalExecutionTime: number;
        dataPointsAnalyzed: number;
        confidence: "high" | "medium" | "low";
        analysisTimestamp: Date;
    } | undefined;
    rawAgentResponse?: string | undefined;
}>;
type DataAnalystWorkflowResult = z.output<typeof DataAnalystWorkflowResultSchema>;
// Monaco-friendly type alias
type DataAnalystWorkflowParamsInput = z.input<typeof DataAnalystWorkflowParamsSchema>;;
type DataAnalystWorkflowParams = z.output<typeof DataAnalystWorkflowParamsSchema>;
/**
 * DataAnalystWorkflow - AI-powered iterative database analysis
 *
 * This workflow bubble combines AI agents with PostgreSQL access to:
 * 1. Understand user questions about database data
 * 2. Iteratively explore the database with multiple targeted queries
 * 3. Provide comprehensive analysis with business insights
 * 4. Adapt communication style based on audience and personality settings
 * 5. Log every step for transparency and debugging
 *
 * Key Features:
 * - Iterative query execution with intelligent reasoning
 * - Configurable personality and analysis depth
 * - Business insights beyond direct answers
 * - Comprehensive execution logging
 * - Type-safe integration with existing bubble architecture
 */
export declare class DataAnalystWorkflow extends WorkflowBubble<DataAnalystWorkflowParams, DataAnalystWorkflowResult> {
    static readonly bubbleName = "data-analyst";
    static readonly schema: z.ZodObject<{
        dataSourceType: z.ZodDefault<z.ZodEnum<["postgresql"]>>;
        userQuestion: z.ZodString;
        analysisDepth: z.ZodDefault<z.ZodEnum<["basic", "detailed", "comprehensive"]>>;
        targetAudience: z.ZodDefault<z.ZodEnum<["technical", "business", "executive"]>>;
        includeInsights: z.ZodDefault<z.ZodBoolean>;
        aiPersonality: z.ZodDefault<z.ZodEnum<["professional", "friendly", "direct", "analytical", "conversational"]>>;
        maxQueries: z.ZodDefault<z.ZodNumber>;
        queryTimeout: z.ZodDefault<z.ZodNumber>;
        aiModel: z.ZodDefault<z.ZodObject<{
            model: z.ZodDefault<z.ZodEnum<["openai/gpt-4o", "openai/gpt-4", "openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "openai/gpt-3.5-turbo-16k", "google/gemini-2.5-pro", "google/gemini-2.5-flash", "google/gemini-2.5-flash-lite", "google/gemini-2.0-flash-exp", "google/gemini-pro", "google/gemini-pro-vision", "google/gemini-1.5-pro", "google/gemini-1.5-flash"]>>;
            temperature: z.ZodDefault<z.ZodNumber>;
            maxTokens: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
            temperature: number;
            maxTokens: number;
        }, {
            model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
            temperature?: number | undefined;
            maxTokens?: number | undefined;
        }>>;
        ignoreSSLErrors: z.ZodDefault<z.ZodBoolean>;
        additionalContext: z.ZodOptional<z.ZodString>;
        credentials: z.ZodOptional<z.ZodRecord<z.ZodNativeEnum<typeof CredentialType>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        dataSourceType: "postgresql";
        userQuestion: string;
        analysisDepth: "basic" | "detailed" | "comprehensive";
        targetAudience: "technical" | "business" | "executive";
        includeInsights: boolean;
        aiPersonality: "professional" | "friendly" | "direct" | "analytical" | "conversational";
        maxQueries: number;
        queryTimeout: number;
        aiModel: {
            model: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash";
            temperature: number;
            maxTokens: number;
        };
        ignoreSSLErrors: boolean;
        additionalContext?: string | undefined;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }, {
        userQuestion: string;
        dataSourceType?: "postgresql" | undefined;
        analysisDepth?: "basic" | "detailed" | "comprehensive" | undefined;
        targetAudience?: "technical" | "business" | "executive" | undefined;
        includeInsights?: boolean | undefined;
        aiPersonality?: "professional" | "friendly" | "direct" | "analytical" | "conversational" | undefined;
        maxQueries?: number | undefined;
        queryTimeout?: number | undefined;
        aiModel?: {
            model?: "openai/gpt-4o" | "openai/gpt-4" | "openai/gpt-4-turbo" | "openai/gpt-3.5-turbo" | "openai/gpt-3.5-turbo-16k" | "google/gemini-2.5-pro" | "google/gemini-2.5-flash" | "google/gemini-2.5-flash-lite" | "google/gemini-2.0-flash-exp" | "google/gemini-pro" | "google/gemini-pro-vision" | "google/gemini-1.5-pro" | "google/gemini-1.5-flash" | undefined;
            temperature?: number | undefined;
            maxTokens?: number | undefined;
        } | undefined;
        ignoreSSLErrors?: boolean | undefined;
        additionalContext?: string | undefined;
        credentials?: Partial<Record<CredentialType, string>> | undefined;
    }>;
    static readonly resultSchema: z.ZodObject<{
        success: z.ZodBoolean;
        error: z.ZodString;
        directAnswer: z.ZodOptional<z.ZodString>;
        insights: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        recommendations: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        queriesExecuted: z.ZodOptional<z.ZodArray<z.ZodObject<{
            queryNumber: z.ZodNumber;
            query: z.ZodString;
            reasoning: z.ZodString;
            resultSummary: z.ZodString;
            executionTime: z.ZodNumber;
            rowCount: z.ZodNumber;
            success: z.ZodBoolean;
            error: z.ZodOptional<z.ZodString>;
            timestamp: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            success: boolean;
            queryNumber: number;
            query: string;
            reasoning: string;
            resultSummary: string;
            executionTime: number;
            rowCount: number;
            timestamp: Date;
            error?: string | undefined;
        }, {
            success: boolean;
            queryNumber: number;
            query: string;
            reasoning: string;
            resultSummary: string;
            executionTime: number;
            rowCount: number;
            timestamp: Date;
            error?: string | undefined;
        }>, "many">>;
        analysisMetadata: z.ZodOptional<z.ZodObject<{
            totalQueries: z.ZodNumber;
            totalExecutionTime: z.ZodNumber;
            dataPointsAnalyzed: z.ZodNumber;
            confidence: z.ZodEnum<["high", "medium", "low"]>;
            analysisTimestamp: z.ZodDate;
            targetAudience: z.ZodString;
            analysisDepth: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            analysisDepth: string;
            targetAudience: string;
            totalQueries: number;
            totalExecutionTime: number;
            dataPointsAnalyzed: number;
            confidence: "high" | "medium" | "low";
            analysisTimestamp: Date;
        }, {
            analysisDepth: string;
            targetAudience: string;
            totalQueries: number;
            totalExecutionTime: number;
            dataPointsAnalyzed: number;
            confidence: "high" | "medium" | "low";
            analysisTimestamp: Date;
        }>>;
        rawAgentResponse: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        error: string;
        directAnswer?: string | undefined;
        insights?: string[] | undefined;
        recommendations?: string[] | undefined;
        queriesExecuted?: {
            success: boolean;
            queryNumber: number;
            query: string;
            reasoning: string;
            resultSummary: string;
            executionTime: number;
            rowCount: number;
            timestamp: Date;
            error?: string | undefined;
        }[] | undefined;
        analysisMetadata?: {
            analysisDepth: string;
            targetAudience: string;
            totalQueries: number;
            totalExecutionTime: number;
            dataPointsAnalyzed: number;
            confidence: "high" | "medium" | "low";
            analysisTimestamp: Date;
        } | undefined;
        rawAgentResponse?: string | undefined;
    }, {
        success: boolean;
        error: string;
        directAnswer?: string | undefined;
        insights?: string[] | undefined;
        recommendations?: string[] | undefined;
        queriesExecuted?: {
            success: boolean;
            queryNumber: number;
            query: string;
            reasoning: string;
            resultSummary: string;
            executionTime: number;
            rowCount: number;
            timestamp: Date;
            error?: string | undefined;
        }[] | undefined;
        analysisMetadata?: {
            analysisDepth: string;
            targetAudience: string;
            totalQueries: number;
            totalExecutionTime: number;
            dataPointsAnalyzed: number;
            confidence: "high" | "medium" | "low";
            analysisTimestamp: Date;
        } | undefined;
        rawAgentResponse?: string | undefined;
    }>;
    static readonly shortDescription = "AI-powered iterative database analysis with business insights";
    static readonly longDescription = "\n    Combines AI agents with PostgreSQL access for comprehensive data analysis.\n    The agent iteratively explores your database, asks targeted questions through SQL queries,\n    and provides business insights tailored to your audience and requirements.\n    \n    Features:\n    - Iterative database exploration with multiple queries\n    - Configurable AI personality (professional, friendly, analytical, etc.)\n    - Analysis depth control (basic answers vs comprehensive business analysis)  \n    - Target audience adaptation (technical, business, executive)\n    - Comprehensive logging of every query and reasoning step\n    - Business insights and recommendations beyond direct answers\n    \n    Perfect for:\n    - Data exploration and discovery\n    - Business intelligence queries  \n    - Trend analysis and pattern recognition\n    - Executive reporting with insights\n    - Technical database analysis\n  ";
    static readonly alias = "analyze-data";
    private queryExecutions;
    private totalExecutionTime;
    constructor(params: DataAnalystWorkflowParamsInput, context?: BubbleContext);
    protected performAction(_context?: BubbleContext): Promise<DataAnalystWorkflowResult>;
    /**
     * Create PostgreSQL tool for the AI agent with detailed logging
     */
    private createPostgreSQLTool;
    /**
     * Build system prompt based on configuration
     */
    private buildSystemPrompt;
    /**
     * Initialize AI model based on configuration
     */
    private initializeAIModel;
    /**
     * Parse agent response to extract structured information
     */
    private parseAgentResponse;
    /**
     * Calculate confidence level based on query execution results
     */
    private calculateConfidence;
}
export {};

type BubbleClassWithMetadata = {
    new (params: unknown, context?: unknown): IBubble;
    readonly bubbleName: string;
    readonly schema: z.ZodObject<z.ZodRawShape> | z.ZodDiscriminatedUnion<string, z.ZodObject<z.ZodRawShape>[]>;
    readonly resultSchema?: z.ZodObject<z.ZodRawShape> | z.ZodDiscriminatedUnion<string, z.ZodObject<z.ZodRawShape>[]>;
    readonly shortDescription: string;
    readonly longDescription: string;
    readonly alias?: string;
};
export declare class BubbleRegistry {
    private static bubbles;
    static register<T extends BubbleClassWithMetadata>(name: string, bubbleClass: T): void;
    static get(name: string): BubbleClassWithMetadata | undefined;
    static getAll(): BubbleClassWithMetadata[];
    static list(): string[];
    static create(name: string, params: unknown, context?: unknown): IBubble | undefined;
    static getMetadata(name: string): {
        name: string;
        shortDescription: string;
        longDescription: string;
        alias: string | undefined;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
            [x: string]: any;
        }, {
            [x: string]: any;
        }> | z.ZodDiscriminatedUnion<string, z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
            [x: string]: any;
        }, {
            [x: string]: any;
        }>[]>;
        resultSchema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
            [x: string]: any;
        }, {
            [x: string]: any;
        }> | z.ZodDiscriminatedUnion<string, z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
            [x: string]: any;
        }, {
            [x: string]: any;
        }>[]> | undefined;
        params: z.ZodRawShape | undefined;
        credentialOptions: import("./index.js").CredentialType[];
    } | undefined;
    static getAllMetadata(): ({
        name: string;
        shortDescription: string;
        longDescription: string;
        alias: string | undefined;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
            [x: string]: any;
        }, {
            [x: string]: any;
        }> | z.ZodDiscriminatedUnion<string, z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
            [x: string]: any;
        }, {
            [x: string]: any;
        }>[]>;
        resultSchema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
            [x: string]: any;
        }, {
            [x: string]: any;
        }> | z.ZodDiscriminatedUnion<string, z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
            [x: string]: any;
        }, {
            [x: string]: any;
        }>[]> | undefined;
        params: z.ZodRawShape | undefined;
        credentialOptions: import("./index.js").CredentialType[];
    } | undefined)[];
}

// Inlined from ./types/bubble.js

// Inlined from ./credentials.js
/**
 * Enum of all possible credential types in the application
 */
export declare enum CredentialType {
    OPENAI_CRED = "OPENAI_CRED",
    GOOGLE_GEMINI_CRED = "GOOGLE_GEMINI_CRED",
    ANTHROPIC_CRED = "ANTHROPIC_CRED",
    DATABASE_CRED = "DATABASE_CRED",
    SLACK_CRED = "SLACK_CRED"
}
/**
 * Maps credential types to their environment variable names
 */
export declare const CREDENTIAL_ENV_MAP: Record<CredentialType, string>;
/**
 * Maps bubble names to their accepted credential types
 */
export type CredentialOptions = Partial<Record<CredentialType, string>>;
/**
 * Collection of credential options for all bubbles
 */
export declare const BUBBLE_CREDENTIAL_OPTIONS: Record<string, CredentialType[]>;

export interface IBubble {
    name: string;
    schema: z.ZodSchema<unknown>;
    shortDescription: string;
    longDescription: string;
    alias?: string;
    action: () => Promise<unknown>;
}
export interface IServiceBubble extends IBubble {
    type: 'service';
    authType?: 'oauth' | 'apikey' | 'none' | 'connection-string';
}
export interface IWorkflowBubble extends IBubble {
    type: 'workflow';
    steps: IBubble[];
}
export interface UIBubble extends IBubble {
    type: 'ui';
    template: string;
    agentMdPath?: string;
}
export interface InfraBubble extends IBubble {
    type: 'infra';
    provider: 'aws' | 'gcp' | 'supabase';
    resourceType: string;
}
export interface BubbleRule {
    frequency?: string;
    trigger?: string;
    conditions?: Record<string, unknown>;
}
export interface BubbleOperationResult {
    success: boolean;
    error: string;
}
export type BubbleFlowOperationResult = unknown;
export interface BubbleResult<T> extends BubbleOperationResult {
    data: T | undefined;
    executionId: string;
    timestamp: Date;
}
export interface BubbleContext {
    userId: string;
    organizationId: string;
    environment: 'development' | 'staging' | 'production';
    metadata?: Record<string, unknown>;
}
export type ServiceBubbleParams<T = unknown> = T & {
    credentials?: CredentialOptions;
};

// ============================================================================
// Module Declaration for Monaco Editor
// ============================================================================

declare module '@bubblelab/bubble-core' {
  export * from './nodex-bubble-core-manual-bundle';
}
