import { ChartJSTool } from '../src/bubbles/tool-bubble/chart-js-tool.js';
import * as fs from 'fs/promises';
import * as path from 'path';

async function testChartFileGeneration() {
  console.log('üß™ Testing Chart.js File Generation...\n');

  // Create a test output directory
  const testOutputDir = path.join(process.cwd(), 'test-output', 'charts');

  // Test data
  const salesData = [
    { month: 'Jan', sales: 100, profit: 20 },
    { month: 'Feb', sales: 150, profit: 35 },
    { month: 'Mar', sales: 120, profit: 28 },
    { month: 'Apr', sales: 180, profit: 42 },
    { month: 'May', sales: 160, profit: 38 },
  ];

  const categoryData = [
    { category: 'Desktop', users: 450 },
    { category: 'Mobile', users: 320 },
    { category: 'Tablet', users: 180 },
  ];

  try {
    // Test 1: Generate line chart file
    console.log('üìà Test 1: Generate line chart file');
    const lineTool = new ChartJSTool({
      data: salesData,
      chartType: 'line',
      xColumn: 'month',
      yColumn: 'sales',
      generateFile: true,
      filePath: testOutputDir,
      fileName: 'sales-trend.png',
      options: {
        title: 'Monthly Sales Trend',
        xAxisLabel: 'Month',
        yAxisLabel: 'Sales ($)',
        colorScheme: 'viridis',
      },
      reasoning: 'Creating a line chart to visualize sales trends over time',
    });

    const lineResult = await lineTool.action();
    console.log('‚úÖ Line chart result:', {
      success: lineResult.success,
      filePath: lineResult.data?.filePath,
      fileExists: lineResult.data?.fileExists,
      fileSize: lineResult.data?.fileSize,
      error: lineResult.error,
    });

    // Verify file exists independently
    if (lineResult.data?.filePath) {
      const fileExists = await checkFileExists(lineResult.data.filePath);
      console.log(`üîç Independent verification: File exists = ${fileExists}`);

      if (fileExists) {
        const stats = await fs.stat(lineResult.data.filePath);
        console.log(`üìè File size: ${stats.size} bytes`);
        console.log(`üìÖ Created: ${stats.birthtime.toISOString()}`);
      }
    }

    // Test 2: Generate pie chart file
    console.log('\nü•ß Test 2: Generate pie chart file');
    const pieTool = new ChartJSTool({
      data: categoryData,
      chartType: 'pie',
      xColumn: 'category',
      yColumn: 'users',
      generateFile: true,
      filePath: testOutputDir,
      fileName: 'user-distribution.png',
      options: {
        title: 'User Distribution by Device',
        colorScheme: 'categorical',
        showLegend: true,
      },
      reasoning:
        'Creating a pie chart to show user distribution across device types',
    });

    const pieResult = await pieTool.action();
    console.log('‚úÖ Pie chart result:', {
      success: pieResult.success,
      filePath: pieResult.data?.filePath,
      fileExists: pieResult.data?.fileExists,
      fileSize: pieResult.data?.fileSize,
      suggestedSize: pieResult.data?.suggestedSize,
      error: pieResult.error,
    });

    // Test 3: Generate bar chart with auto-naming
    console.log('\nüìä Test 3: Generate bar chart with auto-naming');
    const barTool = new ChartJSTool({
      data: salesData,
      chartType: 'bar',
      xColumn: 'month',
      yColumn: 'profit',
      generateFile: true,
      filePath: testOutputDir,
      // No fileName specified - should auto-generate
      options: {
        title: 'Monthly Profit',
        colorScheme: 'blues',
      },
      reasoning:
        'Creating a bar chart to show monthly profit with auto-generated filename',
    });

    const barResult = await barTool.action();
    console.log('‚úÖ Bar chart result:', {
      success: barResult.success,
      filePath: barResult.data?.filePath,
      fileExists: barResult.data?.fileExists,
      fileSize: barResult.data?.fileSize,
      autoGeneratedFileName: barResult.data?.filePath
        ? path.basename(barResult.data.filePath)
        : 'N/A',
      error: barResult.error,
    });

    // Test 4: Generate without file (config only)
    console.log('\n‚öôÔ∏è Test 4: Generate config only (no file)');
    const configOnlyTool = new ChartJSTool({
      data: salesData,
      chartType: 'scatter',
      generateFile: false, // Explicitly no file
      reasoning: 'Testing configuration generation without file output',
    });

    const configResult = await configOnlyTool.action();
    console.log('‚úÖ Config-only result:', {
      success: configResult.success,
      hasConfig: !!configResult.data?.chartConfig,
      filePath: configResult.data?.filePath,
      fileExists: configResult.data?.fileExists,
      error: configResult.error,
    });

    // Test 5: Error handling - invalid directory
    console.log('\n‚ùå Test 5: Error handling - invalid directory');
    const errorTool = new ChartJSTool({
      data: salesData,
      chartType: 'line',
      generateFile: true,
      filePath: '/invalid/readonly/path/that/does/not/exist',
      fileName: 'should-fail.png',
      reasoning: 'Testing error handling for invalid file paths',
    });

    const errorResult = await errorTool.action();
    console.log('‚úÖ Error handling result:', {
      success: errorResult.success,
      error: errorResult.error,
      filePath: errorResult.data?.filePath,
      fileExists: errorResult.data?.fileExists,
    });

    // Summary
    console.log('\nüìã Test Summary:');
    console.log('================');

    const allFiles = await listGeneratedFiles(testOutputDir);
    console.log(`Generated files in ${testOutputDir}:`);
    for (const file of allFiles) {
      const fullPath = path.join(testOutputDir, file);
      const stats = await fs.stat(fullPath);
      console.log(`  üìÑ ${file} (${stats.size} bytes)`);
    }

    console.log('\nüéâ Chart file generation tests completed!');
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

async function checkFileExists(filePath: string): Promise<boolean> {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

async function listGeneratedFiles(dir: string): Promise<string[]> {
  try {
    const files = await fs.readdir(dir);
    return files.filter((file) => file.endsWith('.png'));
  } catch {
    return [];
  }
}

// Run the test
testChartFileGeneration().catch(console.error);
