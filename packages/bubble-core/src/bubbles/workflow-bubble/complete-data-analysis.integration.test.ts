import dotenv from 'dotenv';
import path from 'path';
import { DatabaseAnalyzerWorkflowBubble } from './database-analyzer.workflow';
import { SlackNotifierWorkflowBubble } from './slack-notifier.workflow';
import { AIAgentBubble } from '../service-bubble/ai-agent';
import { PostgreSQLBubble } from '../service-bubble/postgresql';

// Load environment variables from the package root
dotenv.config({ path: path.join(process.cwd(), '../../.env') });

describe('Complete Data Analysis Workflow Integration Tests', () => {
  describe('Full end-to-end data analysis pipeline using WorkflowBubbles', () => {
    test('should analyze schema, generate SQL, execute query, and send Slack notification - all using WorkflowBubbles', async () => {
      // Skip if no real credentials available
      if (
        !process.env.GOOGLE_API_KEY ||
        process.env.GOOGLE_API_KEY.startsWith('test-') ||
        process.env.GOOGLE_API_KEY.length < 10
      ) {
        console.log('⚠️  Skipping integration test - no real Google API key');
        return;
      }

      if (
        !process.env.SLACK_TOKEN ||
        process.env.SLACK_TOKEN.startsWith('xoxb-test-')
      ) {
        console.log('⚠️  Skipping integration test - no real Slack token');
        return;
      }

      if (!process.env.BUBBLE_CONNECTING_STRING_URL) {
        console.log('⚠️  Skipping integration test - no database connection');
        return;
      }

      const userQuery = 'How many users have signed up in the last 7 days?';
      console.log(
        `🚀 Starting complete data analysis pipeline for: "${userQuery}"`
      );

      // Step 1: Analyze database schema using DatabaseAnalyzerWorkflowBubble
      console.log('📊 Step 1: Analyzing database schema...');
      const schemaAnalysis = await new DatabaseAnalyzerWorkflowBubble({
        dataSourceType: 'postgresql',
        ignoreSSLErrors: true,
        includeMetadata: true,
        credentials: {
          DATABASE_CRED: process.env.BUBBLE_CONNECTING_STRING_URL,
        },
      }).action();

      if (!schemaAnalysis.success) {
        throw new Error(`Schema analysis failed: ${schemaAnalysis.error}`);
      }

      console.log(
        `✅ Schema analyzed: ${schemaAnalysis.data?.databaseSchema?.tableCount} tables found`
      );

      // Step 2: Generate SQL query using AI Agent (ServiceBubble)
      console.log('🤖 Step 2: Generating SQL query with AI...');
      const sqlQueryResult = await new AIAgentBubble({
        message: userQuery,
        systemPrompt: `You are a helpful assistant that writes PostgreSQL queries.

Using this database schema: ${schemaAnalysis.data?.databaseSchema?.cleanedJSON}

Write a SQL query to answer the user's question. Return only the query between \`\`\`sql\`\`\` blocks, no other text.`,
        model: {
          model: 'google/gemini-2.5-pro',
          maxTokens: 5000,
        },
        credentials: {
          GOOGLE_GEMINI_CRED: process.env.GOOGLE_API_KEY,
        },
      }).action();

      if (!sqlQueryResult.success) {
        throw new Error(`SQL generation failed: ${sqlQueryResult.error}`);
      }

      // Extract clean SQL query from AI response
      const sqlMatch = sqlQueryResult.data?.response?.match(
        /```(?:sql|postgresql)\n([\s\S]*?)\n```/
      );
      const cleanQuery = sqlMatch ? sqlMatch[1].trim() : null;

      if (!cleanQuery) {
        throw new Error('No valid SQL query generated by AI');
      }

      console.log(`✅ Generated SQL: ${cleanQuery.substring(0, 100)}...`);

      // Step 3: Execute the generated query (ServiceBubble)
      console.log('💾 Step 3: Executing SQL query...');
      const queryResult = await new PostgreSQLBubble({
        query: cleanQuery,
        ignoreSSL: true,
        allowedOperations: ['SELECT'], // Safety first!
        timeout: 30000,
        maxRows: 1000,
        credentials: {
          DATABASE_CRED: process.env.BUBBLE_CONNECTING_STRING_URL,
        },
      }).action();

      if (!queryResult.success) {
        throw new Error(`Query execution failed: ${queryResult.error}`);
      }

      const resultCount = Array.isArray(queryResult.data?.rows)
        ? queryResult.data.rows.length
        : 0;
      console.log(`✅ Query executed: ${resultCount} rows returned`);

      // Step 4: Send intelligent Slack notification using SlackNotifierWorkflowBubble
      console.log('📢 Step 4: Sending formatted results to Slack...');
      const slackNotification = await new SlackNotifierWorkflowBubble({
        contentToFormat: JSON.stringify(queryResult.data, null, 2),
        originalUserQuery: userQuery,
        targetChannel: 'staging-bot',
        messageTitle: '📊 Automated Data Analysis Results',
        messageStyle: 'professional',
        includeFormatting: true,
        maxMessageLength: 3000,
        aiModel: {
          model: 'google/gemini-2.5-flash',
          temperature: 0.3,
        },
        credentials: {
          GOOGLE_GEMINI_CRED: process.env.GOOGLE_API_KEY,
          SLACK_CRED: process.env.SLACK_TOKEN,
        },
      }).action();

      if (!slackNotification.success) {
        throw new Error(
          `Slack notification failed: ${slackNotification.error}`
        );
      }

      console.log('🎉 Complete data analysis pipeline successful!');
      console.log('📈 Pipeline Summary:', {
        tablesAnalyzed: schemaAnalysis.data?.databaseSchema?.tableCount,
        queryGenerated: cleanQuery.length > 0,
        dataRows: resultCount,
        slackChannel: slackNotification.data?.messageInfo?.channelName,
        messageLength: slackNotification.data?.messageInfo?.messageLength,
        workflowBubblesUsed: ['DatabaseAnalyzer', 'SlackNotifier'],
        serviceBubblesUsed: ['AIAgent', 'PostgreSQL'],
      });

      // Verify the complete pipeline succeeded
      expect(schemaAnalysis.success).toBe(true);
      expect(schemaAnalysis.data?.databaseSchema?.tableCount).toBeGreaterThan(
        0
      );
      expect(sqlQueryResult.success).toBe(true);
      expect(cleanQuery).toBeTruthy();
      expect(queryResult.success).toBe(true);
      expect(slackNotification.success).toBe(true);
      expect(slackNotification.data?.messageInfo?.channelName).toBe(
        'staging-bot'
      );
      expect(
        slackNotification.data?.messageInfo?.messageTimestamp
      ).toBeDefined();
    }, 60000); // 60 second timeout for the complete pipeline
  });
});
