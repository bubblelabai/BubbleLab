import { BubbleFlow } from '../bubble-flow-class.js';
import { AIAgentBubble } from '../../bubbles/service-bubble/ai-agent.js';
import { PostgreSQLBubble } from '../../bubbles/service-bubble/postgresql.js';
import { DatabaseAnalyzerWorkflowBubble } from '../../bubbles/workflow-bubble/database-analyzer.workflow.js';
import { SlackNotifierWorkflowBubble } from '../../bubbles/workflow-bubble/slack-notifier.workflow.js';
import type { BubbleFlowOperationResult } from '../../types/bubble.js';
import type { BubbleTriggerEventRegistry } from '@bubblelab/bubble-core';

/**
 * SimplifiedDataAnalysisFlow - Example showing the power of WorkflowBubbles
 *
 * This example demonstrates how WorkflowBubbles dramatically simplify BubbleFlow creation.
 *
 * BEFORE WorkflowBubbles (original integration test):
 * - 200+ lines of code
 * - Manual credential management
 * - Complex error handling
 * - Multiple service bubble orchestration
 * - Manual Slack channel discovery
 * - Manual AI formatting prompts
 *
 * AFTER WorkflowBubbles (this example):
 * - ~50 lines of clean, readable code
 * - Automatic credential injection
 * - Built-in error handling
 * - High-level workflow abstractions
 * - User-friendly parameter names
 * - TypeScript intellisense support
 */
export class SimplifiedDataAnalysisFlow extends BubbleFlow<'webhook/http'> {
  constructor() {
    super(
      'simplified-data-analysis',
      'AI-powered data analysis with automated Slack reporting using WorkflowBubbles'
    );
  }

  async handle(
    payload: BubbleTriggerEventRegistry['webhook/http']
  ): Promise<BubbleFlowOperationResult> {
    try {
      // Extract user query from the webhook payload
      const userQuery =
        (payload.body?.userQuery as string) ||
        'How many subscriptions have we acquired in the last 30 days?';

      // Step 1: Analyze database schema using WorkflowBubble
      // This replaces 30+ lines of manual PostgreSQL schema querying
      const schemaAnalysis = await new DatabaseAnalyzerWorkflowBubble({
        dataSourceType: 'postgresql',
        ignoreSSLErrors: true,
        includeMetadata: true,
      }).action();

      // Step 2: Generate SQL query using AI Agent
      // User-friendly parameter names make intent crystal clear
      const sqlQueryResult = await new AIAgentBubble({
        message: userQuery,
        systemPrompt: `You are a helpful assistant that writes PostgreSQL queries. 
        
Using this database schema: ${schemaAnalysis.data?.databaseSchema?.cleanedJSON}

Write a SQL query to answer the user's question. Return only the query between \`\`\`sql\`\`\` blocks, no other text.`,
        model: {
          model: 'google/gemini-2.5-pro',
        },
      }).action();

      // Extract clean SQL query from AI response
      const sqlMatch = sqlQueryResult.data?.response?.match(
        /```(?:sql|postgresql)\n([\s\S]*?)\n```/
      );
      const cleanQuery = sqlMatch ? sqlMatch[1].trim() : null;

      if (!cleanQuery) {
        throw new Error('No valid SQL query generated by AI');
      }

      // Step 3: Execute the generated query
      const queryResult = await new PostgreSQLBubble({
        query: cleanQuery,
        ignoreSSL: true,
        allowedOperations: [
          'SELECT',
          'WITH',
          'EXPLAIN',
          'ANALYZE',
          'SHOW',
          'DESCRIBE',
          'DESC',
          'CREATE',
        ], // Allow comprehensive analysis
      }).action();

      if (!queryResult.success) {
        throw new Error(`Query execution failed: ${queryResult.error}`);
      }

      console.log(
        `üìà Query executed successfully: ${JSON.stringify(queryResult.data?.rows).length} characters of data`
      );

      // Step 4: Send intelligent Slack notification using WorkflowBubble
      // This replaces 50+ lines of manual Slack channel discovery, AI formatting, and message sending
      const slackNotification = await new SlackNotifierWorkflowBubble({
        contentToFormat: JSON.stringify(queryResult.data, null, 2),
        originalUserQuery: userQuery,
        targetChannel: 'staging-bot', // User-friendly channel name (no # needed)
        messageTitle: 'üìä Data Analysis Results',
        messageStyle: 'professional',
        includeFormatting: true,
        maxMessageLength: 3000,
        aiModel: {
          model: 'google/gemini-2.5-flash',
          temperature: 0.3,
          maxTokens: 1000,
        },
      }).action();

      console.log(
        `üéâ Analysis complete! Message sent to #${slackNotification.data?.messageInfo?.channelName}`
      );

      // Return comprehensive workflow results
      return {
        success: true,
        results: {
          userQuery,
          analysis: {
            tablesAnalyzed: schemaAnalysis.data?.databaseSchema?.tableCount,
            queryGenerated: cleanQuery,
            dataPointsReturned: Array.isArray(queryResult.data?.rows)
              ? queryResult.data.rows.length
              : 0,
          },
          notification: {
            channelName: slackNotification.data?.messageInfo?.channelName,
            messageTimestamp:
              slackNotification.data?.messageInfo?.messageTimestamp,
            messageLength: slackNotification.data?.messageInfo?.messageLength,
            formattingStyle: slackNotification.data?.formattingInfo?.modelUsed,
          },
          executionSummary: {
            totalSteps: 4,
            completedAt: new Date().toISOString(),
            workflowBubblesUsed: ['database-analyzer', 'slack-notifier'],
            serviceBubblesUsed: ['ai-agent', 'postgresql'],
          },
        },
      };
    } catch (error) {
      console.error('‚ùå Data analysis workflow failed:', error);

      // Even error handling is simplified with WorkflowBubbles!
      // Send error notification to Slack automatically
      try {
        await new SlackNotifierWorkflowBubble({
          contentToFormat: `Error in data analysis workflow: ${error instanceof Error ? error.message : 'Unknown error'}`,
          originalUserQuery:
            (payload.body?.userQuery as string) || 'Unknown query',
          targetChannel: 'staging-bot',
          messageTitle: '‚ö†Ô∏è Data Analysis Error',
          messageStyle: 'concise',
          includeFormatting: true,
        }).action();
      } catch (notificationError) {
        console.error('Failed to send error notification:', notificationError);
      }

      return {
        success: false,
        error:
          error instanceof Error ? error.message : 'Unknown workflow error',
        timestamp: new Date().toISOString(),
      };
    }
  }
}
